
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000014b6  0000152a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00001c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001ce  00000000  00000000  00001e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000207b  00000000  00000000  00001fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f31  00000000  00000000  0000405e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c4  00000000  00000000  00004f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00006554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  00006724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  00006adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000059a  00000000  00000000  00007554  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00007aee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 cd 04 	call	0x99a	; 0x99a <main>
      7a:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CMD>:

#define RS_SET		PORTC |= 0x04   		/* SET PORTC THIRD BIT for RS */
#define RS_CLEAR	PORTC &= 0xFB   		/* CLEAR PORTC THIRD BIT for RS */

void CMD(unsigned char cmd)
{                             
      82:	0f 93       	push	r16
      84:	1f 93       	push	r17
      86:	df 93       	push	r29
      88:	cf 93       	push	r28
      8a:	cd b7       	in	r28, 0x3d	; 61
      8c:	de b7       	in	r29, 0x3e	; 62
      8e:	ab 97       	sbiw	r28, 0x2b	; 43
      90:	0f b6       	in	r0, 0x3f	; 63
      92:	f8 94       	cli
      94:	de bf       	out	0x3e, r29	; 62
      96:	0f be       	out	0x3f, r0	; 63
      98:	cd bf       	out	0x3d, r28	; 61
      9a:	8b a7       	std	Y+43, r24	; 0x2b
        DATA = cmd;							// Write command to data port
      9c:	82 e3       	ldi	r24, 0x32	; 50
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	2b a5       	ldd	r18, Y+43	; 0x2b
      a2:	fc 01       	movw	r30, r24
      a4:	20 83       	st	Z, r18
	RW_CLEAR;							// Set the control signals
      a6:	85 e3       	ldi	r24, 0x35	; 53
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	25 e3       	ldi	r18, 0x35	; 53
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	f9 01       	movw	r30, r18
      b0:	20 81       	ld	r18, Z
      b2:	2d 7f       	andi	r18, 0xFD	; 253
      b4:	fc 01       	movw	r30, r24
      b6:	20 83       	st	Z, r18
        RS_CLEAR;
      b8:	85 e3       	ldi	r24, 0x35	; 53
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	25 e3       	ldi	r18, 0x35	; 53
      be:	30 e0       	ldi	r19, 0x00	; 0
      c0:	f9 01       	movw	r30, r18
      c2:	20 81       	ld	r18, Z
      c4:	2b 7f       	andi	r18, 0xFB	; 251
      c6:	fc 01       	movw	r30, r24
      c8:	20 83       	st	Z, r18
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	a0 e2       	ldi	r26, 0x20	; 32
      d0:	b1 e4       	ldi	r27, 0x41	; 65
      d2:	89 83       	std	Y+1, r24	; 0x01
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	ab 83       	std	Y+3, r26	; 0x03
      d8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
      da:	69 81       	ldd	r22, Y+1	; 0x01
      dc:	7a 81       	ldd	r23, Y+2	; 0x02
      de:	8b 81       	ldd	r24, Y+3	; 0x03
      e0:	9c 81       	ldd	r25, Y+4	; 0x04
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	4a e7       	ldi	r20, 0x7A	; 122
      e8:	53 e4       	ldi	r21, 0x43	; 67
      ea:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
      ee:	dc 01       	movw	r26, r24
      f0:	cb 01       	movw	r24, r22
      f2:	8d 83       	std	Y+5, r24	; 0x05
      f4:	9e 83       	std	Y+6, r25	; 0x06
      f6:	af 83       	std	Y+7, r26	; 0x07
      f8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
      fa:	11 e0       	ldi	r17, 0x01	; 1
      fc:	6d 81       	ldd	r22, Y+5	; 0x05
      fe:	7e 81       	ldd	r23, Y+6	; 0x06
     100:	8f 81       	ldd	r24, Y+7	; 0x07
     102:	98 85       	ldd	r25, Y+8	; 0x08
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	40 e8       	ldi	r20, 0x80	; 128
     10a:	5f e3       	ldi	r21, 0x3F	; 63
     10c:	0e 94 10 08 	call	0x1020	; 0x1020 <__ltsf2>
     110:	88 23       	and	r24, r24
     112:	0c f0       	brlt	.+2      	; 0x116 <CMD+0x94>
     114:	10 e0       	ldi	r17, 0x00	; 0
     116:	11 23       	and	r17, r17
     118:	29 f0       	breq	.+10     	; 0x124 <CMD+0xa2>
		__ticks = 1;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	9a 87       	std	Y+10, r25	; 0x0a
     120:	89 87       	std	Y+9, r24	; 0x09
     122:	46 c0       	rjmp	.+140    	; 0x1b0 <CMD+0x12e>
	else if (__tmp > 65535)
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	6d 81       	ldd	r22, Y+5	; 0x05
     128:	7e 81       	ldd	r23, Y+6	; 0x06
     12a:	8f 81       	ldd	r24, Y+7	; 0x07
     12c:	98 85       	ldd	r25, Y+8	; 0x08
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	3f ef       	ldi	r19, 0xFF	; 255
     132:	4f e7       	ldi	r20, 0x7F	; 127
     134:	57 e4       	ldi	r21, 0x47	; 71
     136:	0e 94 b0 07 	call	0xf60	; 0xf60 <__gtsf2>
     13a:	18 16       	cp	r1, r24
     13c:	0c f0       	brlt	.+2      	; 0x140 <CMD+0xbe>
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	11 23       	and	r17, r17
     142:	61 f1       	breq	.+88     	; 0x19c <CMD+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     144:	69 81       	ldd	r22, Y+1	; 0x01
     146:	7a 81       	ldd	r23, Y+2	; 0x02
     148:	8b 81       	ldd	r24, Y+3	; 0x03
     14a:	9c 81       	ldd	r25, Y+4	; 0x04
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e2       	ldi	r20, 0x20	; 32
     152:	51 e4       	ldi	r21, 0x41	; 65
     154:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     158:	dc 01       	movw	r26, r24
     15a:	cb 01       	movw	r24, r22
     15c:	bc 01       	movw	r22, r24
     15e:	cd 01       	movw	r24, r26
     160:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     164:	dc 01       	movw	r26, r24
     166:	cb 01       	movw	r24, r22
     168:	9a 87       	std	Y+10, r25	; 0x0a
     16a:	89 87       	std	Y+9, r24	; 0x09
     16c:	12 c0       	rjmp	.+36     	; 0x192 <CMD+0x110>
     16e:	89 e1       	ldi	r24, 0x19	; 25
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	9c 87       	std	Y+12, r25	; 0x0c
     174:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     176:	8b 85       	ldd	r24, Y+11	; 0x0b
     178:	9c 85       	ldd	r25, Y+12	; 0x0c
     17a:	8c 01       	movw	r16, r24
     17c:	c8 01       	movw	r24, r16
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <CMD+0xfc>
     182:	8c 01       	movw	r16, r24
     184:	1c 87       	std	Y+12, r17	; 0x0c
     186:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     188:	89 85       	ldd	r24, Y+9	; 0x09
     18a:	9a 85       	ldd	r25, Y+10	; 0x0a
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	9a 87       	std	Y+10, r25	; 0x0a
     190:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     192:	89 85       	ldd	r24, Y+9	; 0x09
     194:	9a 85       	ldd	r25, Y+10	; 0x0a
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	51 f7       	brne	.-44     	; 0x16e <CMD+0xec>
     19a:	17 c0       	rjmp	.+46     	; 0x1ca <CMD+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     19c:	6d 81       	ldd	r22, Y+5	; 0x05
     19e:	7e 81       	ldd	r23, Y+6	; 0x06
     1a0:	8f 81       	ldd	r24, Y+7	; 0x07
     1a2:	98 85       	ldd	r25, Y+8	; 0x08
     1a4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     1a8:	dc 01       	movw	r26, r24
     1aa:	cb 01       	movw	r24, r22
     1ac:	9a 87       	std	Y+10, r25	; 0x0a
     1ae:	89 87       	std	Y+9, r24	; 0x09
     1b0:	89 85       	ldd	r24, Y+9	; 0x09
     1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b4:	9e 87       	std	Y+14, r25	; 0x0e
     1b6:	8d 87       	std	Y+13, r24	; 0x0d
     1b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     1bc:	8c 01       	movw	r16, r24
     1be:	f8 01       	movw	r30, r16
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <CMD+0x13e>
     1c4:	8f 01       	movw	r16, r30
     1c6:	1e 87       	std	Y+14, r17	; 0x0e
     1c8:	0d 87       	std	Y+13, r16	; 0x0d
    	_delay_ms(10);						
        ENABLE;								// Clock the command in
     1ca:	85 e3       	ldi	r24, 0x35	; 53
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	25 e3       	ldi	r18, 0x35	; 53
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	f9 01       	movw	r30, r18
     1d4:	20 81       	ld	r18, Z
     1d6:	21 60       	ori	r18, 0x01	; 1
     1d8:	fc 01       	movw	r30, r24
     1da:	20 83       	st	Z, r18
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	a0 e2       	ldi	r26, 0x20	; 32
     1e2:	b1 e4       	ldi	r27, 0x41	; 65
     1e4:	8f 87       	std	Y+15, r24	; 0x0f
     1e6:	98 8b       	std	Y+16, r25	; 0x10
     1e8:	a9 8b       	std	Y+17, r26	; 0x11
     1ea:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     1ec:	6f 85       	ldd	r22, Y+15	; 0x0f
     1ee:	78 89       	ldd	r23, Y+16	; 0x10
     1f0:	89 89       	ldd	r24, Y+17	; 0x11
     1f2:	9a 89       	ldd	r25, Y+18	; 0x12
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	4a e7       	ldi	r20, 0x7A	; 122
     1fa:	53 e4       	ldi	r21, 0x43	; 67
     1fc:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     200:	dc 01       	movw	r26, r24
     202:	cb 01       	movw	r24, r22
     204:	8b 8b       	std	Y+19, r24	; 0x13
     206:	9c 8b       	std	Y+20, r25	; 0x14
     208:	ad 8b       	std	Y+21, r26	; 0x15
     20a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     20c:	11 e0       	ldi	r17, 0x01	; 1
     20e:	6b 89       	ldd	r22, Y+19	; 0x13
     210:	7c 89       	ldd	r23, Y+20	; 0x14
     212:	8d 89       	ldd	r24, Y+21	; 0x15
     214:	9e 89       	ldd	r25, Y+22	; 0x16
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e8       	ldi	r20, 0x80	; 128
     21c:	5f e3       	ldi	r21, 0x3F	; 63
     21e:	0e 94 10 08 	call	0x1020	; 0x1020 <__ltsf2>
     222:	88 23       	and	r24, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <CMD+0x1a6>
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	11 23       	and	r17, r17
     22a:	29 f0       	breq	.+10     	; 0x236 <CMD+0x1b4>
		__ticks = 1;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	98 8f       	std	Y+24, r25	; 0x18
     232:	8f 8b       	std	Y+23, r24	; 0x17
     234:	46 c0       	rjmp	.+140    	; 0x2c2 <CMD+0x240>
	else if (__tmp > 65535)
     236:	11 e0       	ldi	r17, 0x01	; 1
     238:	6b 89       	ldd	r22, Y+19	; 0x13
     23a:	7c 89       	ldd	r23, Y+20	; 0x14
     23c:	8d 89       	ldd	r24, Y+21	; 0x15
     23e:	9e 89       	ldd	r25, Y+22	; 0x16
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	3f ef       	ldi	r19, 0xFF	; 255
     244:	4f e7       	ldi	r20, 0x7F	; 127
     246:	57 e4       	ldi	r21, 0x47	; 71
     248:	0e 94 b0 07 	call	0xf60	; 0xf60 <__gtsf2>
     24c:	18 16       	cp	r1, r24
     24e:	0c f0       	brlt	.+2      	; 0x252 <CMD+0x1d0>
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	11 23       	and	r17, r17
     254:	61 f1       	breq	.+88     	; 0x2ae <CMD+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     256:	6f 85       	ldd	r22, Y+15	; 0x0f
     258:	78 89       	ldd	r23, Y+16	; 0x10
     25a:	89 89       	ldd	r24, Y+17	; 0x11
     25c:	9a 89       	ldd	r25, Y+18	; 0x12
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e2       	ldi	r20, 0x20	; 32
     264:	51 e4       	ldi	r21, 0x41	; 65
     266:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     26a:	dc 01       	movw	r26, r24
     26c:	cb 01       	movw	r24, r22
     26e:	bc 01       	movw	r22, r24
     270:	cd 01       	movw	r24, r26
     272:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     276:	dc 01       	movw	r26, r24
     278:	cb 01       	movw	r24, r22
     27a:	98 8f       	std	Y+24, r25	; 0x18
     27c:	8f 8b       	std	Y+23, r24	; 0x17
     27e:	12 c0       	rjmp	.+36     	; 0x2a4 <CMD+0x222>
     280:	89 e1       	ldi	r24, 0x19	; 25
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	9a 8f       	std	Y+26, r25	; 0x1a
     286:	89 8f       	std	Y+25, r24	; 0x19
     288:	89 8d       	ldd	r24, Y+25	; 0x19
     28a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     28c:	8c 01       	movw	r16, r24
     28e:	c8 01       	movw	r24, r16
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <CMD+0x20e>
     294:	8c 01       	movw	r16, r24
     296:	1a 8f       	std	Y+26, r17	; 0x1a
     298:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     29a:	8f 89       	ldd	r24, Y+23	; 0x17
     29c:	98 8d       	ldd	r25, Y+24	; 0x18
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	98 8f       	std	Y+24, r25	; 0x18
     2a2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a4:	8f 89       	ldd	r24, Y+23	; 0x17
     2a6:	98 8d       	ldd	r25, Y+24	; 0x18
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	51 f7       	brne	.-44     	; 0x280 <CMD+0x1fe>
     2ac:	17 c0       	rjmp	.+46     	; 0x2dc <CMD+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ae:	6b 89       	ldd	r22, Y+19	; 0x13
     2b0:	7c 89       	ldd	r23, Y+20	; 0x14
     2b2:	8d 89       	ldd	r24, Y+21	; 0x15
     2b4:	9e 89       	ldd	r25, Y+22	; 0x16
     2b6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     2ba:	dc 01       	movw	r26, r24
     2bc:	cb 01       	movw	r24, r22
     2be:	98 8f       	std	Y+24, r25	; 0x18
     2c0:	8f 8b       	std	Y+23, r24	; 0x17
     2c2:	8f 89       	ldd	r24, Y+23	; 0x17
     2c4:	98 8d       	ldd	r25, Y+24	; 0x18
     2c6:	9c 8f       	std	Y+28, r25	; 0x1c
     2c8:	8b 8f       	std	Y+27, r24	; 0x1b
     2ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2ce:	8c 01       	movw	r16, r24
     2d0:	f8 01       	movw	r30, r16
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <CMD+0x250>
     2d6:	8f 01       	movw	r16, r30
     2d8:	1c 8f       	std	Y+28, r17	; 0x1c
     2da:	0b 8f       	std	Y+27, r16	; 0x1b
        _delay_ms(10);						// Small delay for sending the command
        DISABLE;
     2dc:	85 e3       	ldi	r24, 0x35	; 53
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	25 e3       	ldi	r18, 0x35	; 53
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	20 81       	ld	r18, Z
     2e8:	2e 7f       	andi	r18, 0xFE	; 254
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
	RS_CLEAR;
     2ee:	85 e3       	ldi	r24, 0x35	; 53
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	25 e3       	ldi	r18, 0x35	; 53
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	2b 7f       	andi	r18, 0xFB	; 251
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	a0 e2       	ldi	r26, 0x20	; 32
     306:	b1 e4       	ldi	r27, 0x41	; 65
     308:	8d 8f       	std	Y+29, r24	; 0x1d
     30a:	9e 8f       	std	Y+30, r25	; 0x1e
     30c:	af 8f       	std	Y+31, r26	; 0x1f
     30e:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     310:	6d 8d       	ldd	r22, Y+29	; 0x1d
     312:	7e 8d       	ldd	r23, Y+30	; 0x1e
     314:	8f 8d       	ldd	r24, Y+31	; 0x1f
     316:	98 a1       	ldd	r25, Y+32	; 0x20
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	4a e7       	ldi	r20, 0x7A	; 122
     31e:	53 e4       	ldi	r21, 0x43	; 67
     320:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     324:	dc 01       	movw	r26, r24
     326:	cb 01       	movw	r24, r22
     328:	89 a3       	std	Y+33, r24	; 0x21
     32a:	9a a3       	std	Y+34, r25	; 0x22
     32c:	ab a3       	std	Y+35, r26	; 0x23
     32e:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     330:	11 e0       	ldi	r17, 0x01	; 1
     332:	69 a1       	ldd	r22, Y+33	; 0x21
     334:	7a a1       	ldd	r23, Y+34	; 0x22
     336:	8b a1       	ldd	r24, Y+35	; 0x23
     338:	9c a1       	ldd	r25, Y+36	; 0x24
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e8       	ldi	r20, 0x80	; 128
     340:	5f e3       	ldi	r21, 0x3F	; 63
     342:	0e 94 10 08 	call	0x1020	; 0x1020 <__ltsf2>
     346:	88 23       	and	r24, r24
     348:	0c f0       	brlt	.+2      	; 0x34c <CMD+0x2ca>
     34a:	10 e0       	ldi	r17, 0x00	; 0
     34c:	11 23       	and	r17, r17
     34e:	29 f0       	breq	.+10     	; 0x35a <CMD+0x2d8>
		__ticks = 1;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	9e a3       	std	Y+38, r25	; 0x26
     356:	8d a3       	std	Y+37, r24	; 0x25
     358:	46 c0       	rjmp	.+140    	; 0x3e6 <CMD+0x364>
	else if (__tmp > 65535)
     35a:	11 e0       	ldi	r17, 0x01	; 1
     35c:	69 a1       	ldd	r22, Y+33	; 0x21
     35e:	7a a1       	ldd	r23, Y+34	; 0x22
     360:	8b a1       	ldd	r24, Y+35	; 0x23
     362:	9c a1       	ldd	r25, Y+36	; 0x24
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	3f ef       	ldi	r19, 0xFF	; 255
     368:	4f e7       	ldi	r20, 0x7F	; 127
     36a:	57 e4       	ldi	r21, 0x47	; 71
     36c:	0e 94 b0 07 	call	0xf60	; 0xf60 <__gtsf2>
     370:	18 16       	cp	r1, r24
     372:	0c f0       	brlt	.+2      	; 0x376 <CMD+0x2f4>
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	11 23       	and	r17, r17
     378:	61 f1       	breq	.+88     	; 0x3d2 <CMD+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     37a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     37c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     37e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     380:	98 a1       	ldd	r25, Y+32	; 0x20
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e2       	ldi	r20, 0x20	; 32
     388:	51 e4       	ldi	r21, 0x41	; 65
     38a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     38e:	dc 01       	movw	r26, r24
     390:	cb 01       	movw	r24, r22
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	9e a3       	std	Y+38, r25	; 0x26
     3a0:	8d a3       	std	Y+37, r24	; 0x25
     3a2:	12 c0       	rjmp	.+36     	; 0x3c8 <CMD+0x346>
     3a4:	89 e1       	ldi	r24, 0x19	; 25
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	98 a7       	std	Y+40, r25	; 0x28
     3aa:	8f a3       	std	Y+39, r24	; 0x27
     3ac:	8f a1       	ldd	r24, Y+39	; 0x27
     3ae:	98 a5       	ldd	r25, Y+40	; 0x28
     3b0:	8c 01       	movw	r16, r24
     3b2:	c8 01       	movw	r24, r16
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <CMD+0x332>
     3b8:	8c 01       	movw	r16, r24
     3ba:	18 a7       	std	Y+40, r17	; 0x28
     3bc:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3be:	8d a1       	ldd	r24, Y+37	; 0x25
     3c0:	9e a1       	ldd	r25, Y+38	; 0x26
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	9e a3       	std	Y+38, r25	; 0x26
     3c6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c8:	8d a1       	ldd	r24, Y+37	; 0x25
     3ca:	9e a1       	ldd	r25, Y+38	; 0x26
     3cc:	00 97       	sbiw	r24, 0x00	; 0
     3ce:	51 f7       	brne	.-44     	; 0x3a4 <CMD+0x322>
     3d0:	17 c0       	rjmp	.+46     	; 0x400 <CMD+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3d2:	69 a1       	ldd	r22, Y+33	; 0x21
     3d4:	7a a1       	ldd	r23, Y+34	; 0x22
     3d6:	8b a1       	ldd	r24, Y+35	; 0x23
     3d8:	9c a1       	ldd	r25, Y+36	; 0x24
     3da:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     3de:	dc 01       	movw	r26, r24
     3e0:	cb 01       	movw	r24, r22
     3e2:	9e a3       	std	Y+38, r25	; 0x26
     3e4:	8d a3       	std	Y+37, r24	; 0x25
     3e6:	8d a1       	ldd	r24, Y+37	; 0x25
     3e8:	9e a1       	ldd	r25, Y+38	; 0x26
     3ea:	9a a7       	std	Y+42, r25	; 0x2a
     3ec:	89 a7       	std	Y+41, r24	; 0x29
     3ee:	89 a5       	ldd	r24, Y+41	; 0x29
     3f0:	9a a5       	ldd	r25, Y+42	; 0x2a
     3f2:	8c 01       	movw	r16, r24
     3f4:	f8 01       	movw	r30, r16
     3f6:	31 97       	sbiw	r30, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <CMD+0x374>
     3fa:	8f 01       	movw	r16, r30
     3fc:	1a a7       	std	Y+42, r17	; 0x2a
     3fe:	09 a7       	std	Y+41, r16	; 0x29
        _delay_ms(10);
        return;
}
     400:	ab 96       	adiw	r28, 0x2b	; 43
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	cf 91       	pop	r28
     40e:	df 91       	pop	r29
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	08 95       	ret

00000416 <CharData>:

void CharData(char data)
{											// 8-bit interface for writing characters
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	6d 97       	sbiw	r28, 0x1d	; 29
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	8d 8f       	std	Y+29, r24	; 0x1d
	DATA = data;							// Write data to port
     430:	82 e3       	ldi	r24, 0x32	; 50
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	2d 8d       	ldd	r18, Y+29	; 0x1d
     436:	fc 01       	movw	r30, r24
     438:	20 83       	st	Z, r18
	RS_SET;									// Set control bits
     43a:	85 e3       	ldi	r24, 0x35	; 53
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	25 e3       	ldi	r18, 0x35	; 53
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	f9 01       	movw	r30, r18
     444:	20 81       	ld	r18, Z
     446:	24 60       	ori	r18, 0x04	; 4
     448:	fc 01       	movw	r30, r24
     44a:	20 83       	st	Z, r18
	RW_CLEAR;
     44c:	85 e3       	ldi	r24, 0x35	; 53
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	25 e3       	ldi	r18, 0x35	; 53
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	f9 01       	movw	r30, r18
     456:	20 81       	ld	r18, Z
     458:	2d 7f       	andi	r18, 0xFD	; 253
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	a0 e2       	ldi	r26, 0x20	; 32
     464:	b1 e4       	ldi	r27, 0x41	; 65
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	9a 83       	std	Y+2, r25	; 0x02
     46a:	ab 83       	std	Y+3, r26	; 0x03
     46c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     46e:	69 81       	ldd	r22, Y+1	; 0x01
     470:	7a 81       	ldd	r23, Y+2	; 0x02
     472:	8b 81       	ldd	r24, Y+3	; 0x03
     474:	9c 81       	ldd	r25, Y+4	; 0x04
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	4a e7       	ldi	r20, 0x7A	; 122
     47c:	53 e4       	ldi	r21, 0x43	; 67
     47e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	8d 83       	std	Y+5, r24	; 0x05
     488:	9e 83       	std	Y+6, r25	; 0x06
     48a:	af 83       	std	Y+7, r26	; 0x07
     48c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     48e:	11 e0       	ldi	r17, 0x01	; 1
     490:	6d 81       	ldd	r22, Y+5	; 0x05
     492:	7e 81       	ldd	r23, Y+6	; 0x06
     494:	8f 81       	ldd	r24, Y+7	; 0x07
     496:	98 85       	ldd	r25, Y+8	; 0x08
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e8       	ldi	r20, 0x80	; 128
     49e:	5f e3       	ldi	r21, 0x3F	; 63
     4a0:	0e 94 10 08 	call	0x1020	; 0x1020 <__ltsf2>
     4a4:	88 23       	and	r24, r24
     4a6:	0c f0       	brlt	.+2      	; 0x4aa <CharData+0x94>
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	11 23       	and	r17, r17
     4ac:	29 f0       	breq	.+10     	; 0x4b8 <CharData+0xa2>
		__ticks = 1;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	9a 87       	std	Y+10, r25	; 0x0a
     4b4:	89 87       	std	Y+9, r24	; 0x09
     4b6:	46 c0       	rjmp	.+140    	; 0x544 <CharData+0x12e>
	else if (__tmp > 65535)
     4b8:	11 e0       	ldi	r17, 0x01	; 1
     4ba:	6d 81       	ldd	r22, Y+5	; 0x05
     4bc:	7e 81       	ldd	r23, Y+6	; 0x06
     4be:	8f 81       	ldd	r24, Y+7	; 0x07
     4c0:	98 85       	ldd	r25, Y+8	; 0x08
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	3f ef       	ldi	r19, 0xFF	; 255
     4c6:	4f e7       	ldi	r20, 0x7F	; 127
     4c8:	57 e4       	ldi	r21, 0x47	; 71
     4ca:	0e 94 b0 07 	call	0xf60	; 0xf60 <__gtsf2>
     4ce:	18 16       	cp	r1, r24
     4d0:	0c f0       	brlt	.+2      	; 0x4d4 <CharData+0xbe>
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	11 23       	and	r17, r17
     4d6:	61 f1       	breq	.+88     	; 0x530 <CharData+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4d8:	69 81       	ldd	r22, Y+1	; 0x01
     4da:	7a 81       	ldd	r23, Y+2	; 0x02
     4dc:	8b 81       	ldd	r24, Y+3	; 0x03
     4de:	9c 81       	ldd	r25, Y+4	; 0x04
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e2       	ldi	r20, 0x20	; 32
     4e6:	51 e4       	ldi	r21, 0x41	; 65
     4e8:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	bc 01       	movw	r22, r24
     4f2:	cd 01       	movw	r24, r26
     4f4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     4f8:	dc 01       	movw	r26, r24
     4fa:	cb 01       	movw	r24, r22
     4fc:	9a 87       	std	Y+10, r25	; 0x0a
     4fe:	89 87       	std	Y+9, r24	; 0x09
     500:	12 c0       	rjmp	.+36     	; 0x526 <CharData+0x110>
     502:	89 e1       	ldi	r24, 0x19	; 25
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	9c 87       	std	Y+12, r25	; 0x0c
     508:	8b 87       	std	Y+11, r24	; 0x0b
     50a:	8b 85       	ldd	r24, Y+11	; 0x0b
     50c:	9c 85       	ldd	r25, Y+12	; 0x0c
     50e:	8c 01       	movw	r16, r24
     510:	c8 01       	movw	r24, r16
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <CharData+0xfc>
     516:	8c 01       	movw	r16, r24
     518:	1c 87       	std	Y+12, r17	; 0x0c
     51a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     51c:	89 85       	ldd	r24, Y+9	; 0x09
     51e:	9a 85       	ldd	r25, Y+10	; 0x0a
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	9a 87       	std	Y+10, r25	; 0x0a
     524:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     526:	89 85       	ldd	r24, Y+9	; 0x09
     528:	9a 85       	ldd	r25, Y+10	; 0x0a
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	51 f7       	brne	.-44     	; 0x502 <CharData+0xec>
     52e:	17 c0       	rjmp	.+46     	; 0x55e <CharData+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     530:	6d 81       	ldd	r22, Y+5	; 0x05
     532:	7e 81       	ldd	r23, Y+6	; 0x06
     534:	8f 81       	ldd	r24, Y+7	; 0x07
     536:	98 85       	ldd	r25, Y+8	; 0x08
     538:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	9a 87       	std	Y+10, r25	; 0x0a
     542:	89 87       	std	Y+9, r24	; 0x09
     544:	89 85       	ldd	r24, Y+9	; 0x09
     546:	9a 85       	ldd	r25, Y+10	; 0x0a
     548:	9e 87       	std	Y+14, r25	; 0x0e
     54a:	8d 87       	std	Y+13, r24	; 0x0d
     54c:	8d 85       	ldd	r24, Y+13	; 0x0d
     54e:	9e 85       	ldd	r25, Y+14	; 0x0e
     550:	8c 01       	movw	r16, r24
     552:	f8 01       	movw	r30, r16
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <CharData+0x13e>
     558:	8f 01       	movw	r16, r30
     55a:	1e 87       	std	Y+14, r17	; 0x0e
     55c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	ENABLE;									// Clock data into LCD
     55e:	85 e3       	ldi	r24, 0x35	; 53
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	25 e3       	ldi	r18, 0x35	; 53
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	20 81       	ld	r18, Z
     56a:	21 60       	ori	r18, 0x01	; 1
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	a0 e2       	ldi	r26, 0x20	; 32
     576:	b1 e4       	ldi	r27, 0x41	; 65
     578:	8f 87       	std	Y+15, r24	; 0x0f
     57a:	98 8b       	std	Y+16, r25	; 0x10
     57c:	a9 8b       	std	Y+17, r26	; 0x11
     57e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     580:	6f 85       	ldd	r22, Y+15	; 0x0f
     582:	78 89       	ldd	r23, Y+16	; 0x10
     584:	89 89       	ldd	r24, Y+17	; 0x11
     586:	9a 89       	ldd	r25, Y+18	; 0x12
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	4a e7       	ldi	r20, 0x7A	; 122
     58e:	53 e4       	ldi	r21, 0x43	; 67
     590:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	8b 8b       	std	Y+19, r24	; 0x13
     59a:	9c 8b       	std	Y+20, r25	; 0x14
     59c:	ad 8b       	std	Y+21, r26	; 0x15
     59e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     5a0:	11 e0       	ldi	r17, 0x01	; 1
     5a2:	6b 89       	ldd	r22, Y+19	; 0x13
     5a4:	7c 89       	ldd	r23, Y+20	; 0x14
     5a6:	8d 89       	ldd	r24, Y+21	; 0x15
     5a8:	9e 89       	ldd	r25, Y+22	; 0x16
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e8       	ldi	r20, 0x80	; 128
     5b0:	5f e3       	ldi	r21, 0x3F	; 63
     5b2:	0e 94 10 08 	call	0x1020	; 0x1020 <__ltsf2>
     5b6:	88 23       	and	r24, r24
     5b8:	0c f0       	brlt	.+2      	; 0x5bc <CharData+0x1a6>
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	11 23       	and	r17, r17
     5be:	29 f0       	breq	.+10     	; 0x5ca <CharData+0x1b4>
		__ticks = 1;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	98 8f       	std	Y+24, r25	; 0x18
     5c6:	8f 8b       	std	Y+23, r24	; 0x17
     5c8:	46 c0       	rjmp	.+140    	; 0x656 <CharData+0x240>
	else if (__tmp > 65535)
     5ca:	11 e0       	ldi	r17, 0x01	; 1
     5cc:	6b 89       	ldd	r22, Y+19	; 0x13
     5ce:	7c 89       	ldd	r23, Y+20	; 0x14
     5d0:	8d 89       	ldd	r24, Y+21	; 0x15
     5d2:	9e 89       	ldd	r25, Y+22	; 0x16
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	3f ef       	ldi	r19, 0xFF	; 255
     5d8:	4f e7       	ldi	r20, 0x7F	; 127
     5da:	57 e4       	ldi	r21, 0x47	; 71
     5dc:	0e 94 b0 07 	call	0xf60	; 0xf60 <__gtsf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	0c f0       	brlt	.+2      	; 0x5e6 <CharData+0x1d0>
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	11 23       	and	r17, r17
     5e8:	61 f1       	breq	.+88     	; 0x642 <CharData+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ea:	6f 85       	ldd	r22, Y+15	; 0x0f
     5ec:	78 89       	ldd	r23, Y+16	; 0x10
     5ee:	89 89       	ldd	r24, Y+17	; 0x11
     5f0:	9a 89       	ldd	r25, Y+18	; 0x12
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e2       	ldi	r20, 0x20	; 32
     5f8:	51 e4       	ldi	r21, 0x41	; 65
     5fa:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     5fe:	dc 01       	movw	r26, r24
     600:	cb 01       	movw	r24, r22
     602:	bc 01       	movw	r22, r24
     604:	cd 01       	movw	r24, r26
     606:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	98 8f       	std	Y+24, r25	; 0x18
     610:	8f 8b       	std	Y+23, r24	; 0x17
     612:	12 c0       	rjmp	.+36     	; 0x638 <CharData+0x222>
     614:	89 e1       	ldi	r24, 0x19	; 25
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	9a 8f       	std	Y+26, r25	; 0x1a
     61a:	89 8f       	std	Y+25, r24	; 0x19
     61c:	89 8d       	ldd	r24, Y+25	; 0x19
     61e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     620:	8c 01       	movw	r16, r24
     622:	c8 01       	movw	r24, r16
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <CharData+0x20e>
     628:	8c 01       	movw	r16, r24
     62a:	1a 8f       	std	Y+26, r17	; 0x1a
     62c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     62e:	8f 89       	ldd	r24, Y+23	; 0x17
     630:	98 8d       	ldd	r25, Y+24	; 0x18
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	98 8f       	std	Y+24, r25	; 0x18
     636:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     638:	8f 89       	ldd	r24, Y+23	; 0x17
     63a:	98 8d       	ldd	r25, Y+24	; 0x18
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	51 f7       	brne	.-44     	; 0x614 <CharData+0x1fe>
     640:	17 c0       	rjmp	.+46     	; 0x670 <CharData+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     642:	6b 89       	ldd	r22, Y+19	; 0x13
     644:	7c 89       	ldd	r23, Y+20	; 0x14
     646:	8d 89       	ldd	r24, Y+21	; 0x15
     648:	9e 89       	ldd	r25, Y+22	; 0x16
     64a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     64e:	dc 01       	movw	r26, r24
     650:	cb 01       	movw	r24, r22
     652:	98 8f       	std	Y+24, r25	; 0x18
     654:	8f 8b       	std	Y+23, r24	; 0x17
     656:	8f 89       	ldd	r24, Y+23	; 0x17
     658:	98 8d       	ldd	r25, Y+24	; 0x18
     65a:	9c 8f       	std	Y+28, r25	; 0x1c
     65c:	8b 8f       	std	Y+27, r24	; 0x1b
     65e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     660:	9c 8d       	ldd	r25, Y+28	; 0x1c
     662:	8c 01       	movw	r16, r24
     664:	f8 01       	movw	r30, r16
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <CharData+0x250>
     66a:	8f 01       	movw	r16, r30
     66c:	1c 8f       	std	Y+28, r17	; 0x1c
     66e:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(10);							//Small delay for sending the data
	DISABLE;								// Reset control bits
     670:	85 e3       	ldi	r24, 0x35	; 53
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	25 e3       	ldi	r18, 0x35	; 53
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	2e 7f       	andi	r18, 0xFE	; 254
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
	RS_CLEAR;
     682:	85 e3       	ldi	r24, 0x35	; 53
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	25 e3       	ldi	r18, 0x35	; 53
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	f9 01       	movw	r30, r18
     68c:	20 81       	ld	r18, Z
     68e:	2b 7f       	andi	r18, 0xFB	; 251
     690:	fc 01       	movw	r30, r24
     692:	20 83       	st	Z, r18
	return;
	}
     694:	6d 96       	adiw	r28, 0x1d	; 29
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	cf 91       	pop	r28
     6a2:	df 91       	pop	r29
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <StringData>:

void StringData(char *data)
{				                            // 8-bit interface for writing strings
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	6e 97       	sbiw	r28, 0x1e	; 30
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	9e 8f       	std	Y+30, r25	; 0x1e
     6c4:	8d 8f       	std	Y+29, r24	; 0x1d
    int i;
    while(*data!='\0')
     6c6:	3a c1       	rjmp	.+628    	; 0x93c <__stack+0xdd>
    {
        DATA = *data;		               // Write data to port
     6c8:	82 e3       	ldi	r24, 0x32	; 50
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	2d 8d       	ldd	r18, Y+29	; 0x1d
     6ce:	3e 8d       	ldd	r19, Y+30	; 0x1e
     6d0:	f9 01       	movw	r30, r18
     6d2:	20 81       	ld	r18, Z
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
        RS_SET;							   // Set control bits
     6d8:	85 e3       	ldi	r24, 0x35	; 53
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	25 e3       	ldi	r18, 0x35	; 53
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	20 81       	ld	r18, Z
     6e4:	24 60       	ori	r18, 0x04	; 4
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
        RW_CLEAR;
     6ea:	85 e3       	ldi	r24, 0x35	; 53
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	25 e3       	ldi	r18, 0x35	; 53
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	2d 7f       	andi	r18, 0xFD	; 253
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	a0 e2       	ldi	r26, 0x20	; 32
     702:	b1 e4       	ldi	r27, 0x41	; 65
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	9a 83       	std	Y+2, r25	; 0x02
     708:	ab 83       	std	Y+3, r26	; 0x03
     70a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     70c:	69 81       	ldd	r22, Y+1	; 0x01
     70e:	7a 81       	ldd	r23, Y+2	; 0x02
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9c 81       	ldd	r25, Y+4	; 0x04
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	4a e7       	ldi	r20, 0x7A	; 122
     71a:	53 e4       	ldi	r21, 0x43	; 67
     71c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     720:	dc 01       	movw	r26, r24
     722:	cb 01       	movw	r24, r22
     724:	8d 83       	std	Y+5, r24	; 0x05
     726:	9e 83       	std	Y+6, r25	; 0x06
     728:	af 83       	std	Y+7, r26	; 0x07
     72a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     72c:	11 e0       	ldi	r17, 0x01	; 1
     72e:	6d 81       	ldd	r22, Y+5	; 0x05
     730:	7e 81       	ldd	r23, Y+6	; 0x06
     732:	8f 81       	ldd	r24, Y+7	; 0x07
     734:	98 85       	ldd	r25, Y+8	; 0x08
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e8       	ldi	r20, 0x80	; 128
     73c:	5f e3       	ldi	r21, 0x3F	; 63
     73e:	0e 94 10 08 	call	0x1020	; 0x1020 <__ltsf2>
     742:	88 23       	and	r24, r24
     744:	0c f0       	brlt	.+2      	; 0x748 <StringData+0x9e>
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	11 23       	and	r17, r17
     74a:	29 f0       	breq	.+10     	; 0x756 <StringData+0xac>
		__ticks = 1;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	9a 87       	std	Y+10, r25	; 0x0a
     752:	89 87       	std	Y+9, r24	; 0x09
     754:	46 c0       	rjmp	.+140    	; 0x7e2 <StringData+0x138>
	else if (__tmp > 65535)
     756:	11 e0       	ldi	r17, 0x01	; 1
     758:	6d 81       	ldd	r22, Y+5	; 0x05
     75a:	7e 81       	ldd	r23, Y+6	; 0x06
     75c:	8f 81       	ldd	r24, Y+7	; 0x07
     75e:	98 85       	ldd	r25, Y+8	; 0x08
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	3f ef       	ldi	r19, 0xFF	; 255
     764:	4f e7       	ldi	r20, 0x7F	; 127
     766:	57 e4       	ldi	r21, 0x47	; 71
     768:	0e 94 b0 07 	call	0xf60	; 0xf60 <__gtsf2>
     76c:	18 16       	cp	r1, r24
     76e:	0c f0       	brlt	.+2      	; 0x772 <StringData+0xc8>
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	11 23       	and	r17, r17
     774:	61 f1       	breq	.+88     	; 0x7ce <StringData+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     776:	69 81       	ldd	r22, Y+1	; 0x01
     778:	7a 81       	ldd	r23, Y+2	; 0x02
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	9c 81       	ldd	r25, Y+4	; 0x04
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	40 e2       	ldi	r20, 0x20	; 32
     784:	51 e4       	ldi	r21, 0x41	; 65
     786:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	bc 01       	movw	r22, r24
     790:	cd 01       	movw	r24, r26
     792:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	9a 87       	std	Y+10, r25	; 0x0a
     79c:	89 87       	std	Y+9, r24	; 0x09
     79e:	12 c0       	rjmp	.+36     	; 0x7c4 <StringData+0x11a>
     7a0:	89 e1       	ldi	r24, 0x19	; 25
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	9c 87       	std	Y+12, r25	; 0x0c
     7a6:	8b 87       	std	Y+11, r24	; 0x0b
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	8c 01       	movw	r16, r24
     7ae:	c8 01       	movw	r24, r16
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <StringData+0x106>
     7b4:	8c 01       	movw	r16, r24
     7b6:	1c 87       	std	Y+12, r17	; 0x0c
     7b8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	9a 87       	std	Y+10, r25	; 0x0a
     7c2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c4:	89 85       	ldd	r24, Y+9	; 0x09
     7c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	51 f7       	brne	.-44     	; 0x7a0 <StringData+0xf6>
     7cc:	17 c0       	rjmp	.+46     	; 0x7fc <StringData+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ce:	6d 81       	ldd	r22, Y+5	; 0x05
     7d0:	7e 81       	ldd	r23, Y+6	; 0x06
     7d2:	8f 81       	ldd	r24, Y+7	; 0x07
     7d4:	98 85       	ldd	r25, Y+8	; 0x08
     7d6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	9a 87       	std	Y+10, r25	; 0x0a
     7e0:	89 87       	std	Y+9, r24	; 0x09
     7e2:	89 85       	ldd	r24, Y+9	; 0x09
     7e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e6:	9e 87       	std	Y+14, r25	; 0x0e
     7e8:	8d 87       	std	Y+13, r24	; 0x0d
     7ea:	8d 85       	ldd	r24, Y+13	; 0x0d
     7ec:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ee:	8c 01       	movw	r16, r24
     7f0:	f8 01       	movw	r30, r16
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <StringData+0x148>
     7f6:	8f 01       	movw	r16, r30
     7f8:	1e 87       	std	Y+14, r17	; 0x0e
     7fa:	0d 87       	std	Y+13, r16	; 0x0d
	    _delay_ms(10);
        ENABLE;							   // Clock data into LCD
     7fc:	85 e3       	ldi	r24, 0x35	; 53
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	25 e3       	ldi	r18, 0x35	; 53
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	f9 01       	movw	r30, r18
     806:	20 81       	ld	r18, Z
     808:	21 60       	ori	r18, 0x01	; 1
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a0 e2       	ldi	r26, 0x20	; 32
     814:	b1 e4       	ldi	r27, 0x41	; 65
     816:	8f 87       	std	Y+15, r24	; 0x0f
     818:	98 8b       	std	Y+16, r25	; 0x10
     81a:	a9 8b       	std	Y+17, r26	; 0x11
     81c:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     81e:	6f 85       	ldd	r22, Y+15	; 0x0f
     820:	78 89       	ldd	r23, Y+16	; 0x10
     822:	89 89       	ldd	r24, Y+17	; 0x11
     824:	9a 89       	ldd	r25, Y+18	; 0x12
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	4a e7       	ldi	r20, 0x7A	; 122
     82c:	53 e4       	ldi	r21, 0x43	; 67
     82e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     832:	dc 01       	movw	r26, r24
     834:	cb 01       	movw	r24, r22
     836:	8b 8b       	std	Y+19, r24	; 0x13
     838:	9c 8b       	std	Y+20, r25	; 0x14
     83a:	ad 8b       	std	Y+21, r26	; 0x15
     83c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     83e:	11 e0       	ldi	r17, 0x01	; 1
     840:	6b 89       	ldd	r22, Y+19	; 0x13
     842:	7c 89       	ldd	r23, Y+20	; 0x14
     844:	8d 89       	ldd	r24, Y+21	; 0x15
     846:	9e 89       	ldd	r25, Y+22	; 0x16
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e8       	ldi	r20, 0x80	; 128
     84e:	5f e3       	ldi	r21, 0x3F	; 63
     850:	0e 94 10 08 	call	0x1020	; 0x1020 <__ltsf2>
     854:	88 23       	and	r24, r24
     856:	0c f0       	brlt	.+2      	; 0x85a <StringData+0x1b0>
     858:	10 e0       	ldi	r17, 0x00	; 0
     85a:	11 23       	and	r17, r17
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	98 8f       	std	Y+24, r25	; 0x18
     864:	8f 8b       	std	Y+23, r24	; 0x17
     866:	46 c0       	rjmp	.+140    	; 0x8f4 <__stack+0x95>
	else if (__tmp > 65535)
     868:	11 e0       	ldi	r17, 0x01	; 1
     86a:	6b 89       	ldd	r22, Y+19	; 0x13
     86c:	7c 89       	ldd	r23, Y+20	; 0x14
     86e:	8d 89       	ldd	r24, Y+21	; 0x15
     870:	9e 89       	ldd	r25, Y+22	; 0x16
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	3f ef       	ldi	r19, 0xFF	; 255
     876:	4f e7       	ldi	r20, 0x7F	; 127
     878:	57 e4       	ldi	r21, 0x47	; 71
     87a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__gtsf2>
     87e:	18 16       	cp	r1, r24
     880:	0c f0       	brlt	.+2      	; 0x884 <__stack+0x25>
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	11 23       	and	r17, r17
     886:	61 f1       	breq	.+88     	; 0x8e0 <__stack+0x81>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     888:	6f 85       	ldd	r22, Y+15	; 0x0f
     88a:	78 89       	ldd	r23, Y+16	; 0x10
     88c:	89 89       	ldd	r24, Y+17	; 0x11
     88e:	9a 89       	ldd	r25, Y+18	; 0x12
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e2       	ldi	r20, 0x20	; 32
     896:	51 e4       	ldi	r21, 0x41	; 65
     898:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__mulsf3>
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	98 8f       	std	Y+24, r25	; 0x18
     8ae:	8f 8b       	std	Y+23, r24	; 0x17
     8b0:	12 c0       	rjmp	.+36     	; 0x8d6 <__stack+0x77>
     8b2:	89 e1       	ldi	r24, 0x19	; 25
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	9a 8f       	std	Y+26, r25	; 0x1a
     8b8:	89 8f       	std	Y+25, r24	; 0x19
     8ba:	89 8d       	ldd	r24, Y+25	; 0x19
     8bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8be:	8c 01       	movw	r16, r24
     8c0:	c8 01       	movw	r24, r16
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <__stack+0x63>
     8c6:	8c 01       	movw	r16, r24
     8c8:	1a 8f       	std	Y+26, r17	; 0x1a
     8ca:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8cc:	8f 89       	ldd	r24, Y+23	; 0x17
     8ce:	98 8d       	ldd	r25, Y+24	; 0x18
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	98 8f       	std	Y+24, r25	; 0x18
     8d4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8d6:	8f 89       	ldd	r24, Y+23	; 0x17
     8d8:	98 8d       	ldd	r25, Y+24	; 0x18
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	51 f7       	brne	.-44     	; 0x8b2 <__stack+0x53>
     8de:	17 c0       	rjmp	.+46     	; 0x90e <__stack+0xaf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e0:	6b 89       	ldd	r22, Y+19	; 0x13
     8e2:	7c 89       	ldd	r23, Y+20	; 0x14
     8e4:	8d 89       	ldd	r24, Y+21	; 0x15
     8e6:	9e 89       	ldd	r25, Y+22	; 0x16
     8e8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__fixunssfsi>
     8ec:	dc 01       	movw	r26, r24
     8ee:	cb 01       	movw	r24, r22
     8f0:	98 8f       	std	Y+24, r25	; 0x18
     8f2:	8f 8b       	std	Y+23, r24	; 0x17
     8f4:	8f 89       	ldd	r24, Y+23	; 0x17
     8f6:	98 8d       	ldd	r25, Y+24	; 0x18
     8f8:	9c 8f       	std	Y+28, r25	; 0x1c
     8fa:	8b 8f       	std	Y+27, r24	; 0x1b
     8fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     900:	8c 01       	movw	r16, r24
     902:	f8 01       	movw	r30, r16
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0xa5>
     908:	8f 01       	movw	r16, r30
     90a:	1c 8f       	std	Y+28, r17	; 0x1c
     90c:	0b 8f       	std	Y+27, r16	; 0x1b
        _delay_ms(10);					   //Small delay for sending the data
        DISABLE;						   // Reset control bits
     90e:	85 e3       	ldi	r24, 0x35	; 53
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	25 e3       	ldi	r18, 0x35	; 53
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	f9 01       	movw	r30, r18
     918:	20 81       	ld	r18, Z
     91a:	2e 7f       	andi	r18, 0xFE	; 254
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
        RS_CLEAR;  
     920:	85 e3       	ldi	r24, 0x35	; 53
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	25 e3       	ldi	r18, 0x35	; 53
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	f9 01       	movw	r30, r18
     92a:	20 81       	ld	r18, Z
     92c:	2b 7f       	andi	r18, 0xFB	; 251
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
        data++;                         
     932:	8d 8d       	ldd	r24, Y+29	; 0x1d
     934:	9e 8d       	ldd	r25, Y+30	; 0x1e
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	9e 8f       	std	Y+30, r25	; 0x1e
     93a:	8d 8f       	std	Y+29, r24	; 0x1d
	}

void StringData(char *data)
{				                            // 8-bit interface for writing strings
    int i;
    while(*data!='\0')
     93c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     93e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	88 23       	and	r24, r24
     946:	09 f0       	breq	.+2      	; 0x94a <__stack+0xeb>
     948:	bf ce       	rjmp	.-642    	; 0x6c8 <StringData+0x1e>
        DISABLE;						   // Reset control bits
        RS_CLEAR;  
        data++;                         
    }
    return;
}
     94a:	6e 96       	adiw	r28, 0x1e	; 30
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <lcd_init>:

void lcd_init()
{
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	DATADIR = 0xFF;			//OUTPUT MODE
     968:	81 e3       	ldi	r24, 0x31	; 49
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	2f ef       	ldi	r18, 0xFF	; 255
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18
	CONTROLDIR = 0xFF;		//OUTPUT MODE
     972:	84 e3       	ldi	r24, 0x34	; 52
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	fc 01       	movw	r30, r24
     97a:	20 83       	st	Z, r18

	CMD(0x80);
     97c:	80 e8       	ldi	r24, 0x80	; 128
     97e:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
	CMD(0x38);
     982:	88 e3       	ldi	r24, 0x38	; 56
     984:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
	CMD(0x01);
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
	CMD(0x0E);
     98e:	8e e0       	ldi	r24, 0x0E	; 14
     990:	0e 94 41 00 	call	0x82	; 0x82 <CMD>

}
     994:	cf 91       	pop	r28
     996:	df 91       	pop	r29
     998:	08 95       	ret

0000099a <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"

int main(void)
{
     99a:	df 93       	push	r29
     99c:	cf 93       	push	r28
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
	lcd_init();
     9a2:	0e 94 b0 04 	call	0x960	; 0x960 <lcd_init>
	while(1)
	{
	CMD(0x80);
     9a6:	80 e8       	ldi	r24, 0x80	; 128
     9a8:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
	StringData("Etiq");
     9ac:	80 e6       	ldi	r24, 0x60	; 96
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 55 03 	call	0x6aa	; 0x6aa <StringData>
	CMD(0xC0);
     9b4:	80 ec       	ldi	r24, 0xC0	; 192
     9b6:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
	StringData("Technologies");
     9ba:	85 e6       	ldi	r24, 0x65	; 101
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 55 03 	call	0x6aa	; 0x6aa <StringData>
	}
     9c2:	f1 cf       	rjmp	.-30     	; 0x9a6 <main+0xc>

000009c4 <__fixunssfsi>:
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	7b 01       	movw	r14, r22
     9ce:	8c 01       	movw	r16, r24
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	5f e4       	ldi	r21, 0x4F	; 79
     9d8:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__gesf2>
     9dc:	87 fd       	sbrc	r24, 7
     9de:	11 c0       	rjmp	.+34     	; 0xa02 <__fixunssfsi+0x3e>
     9e0:	c8 01       	movw	r24, r16
     9e2:	b7 01       	movw	r22, r14
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	5f e4       	ldi	r21, 0x4F	; 79
     9ec:	0e 94 85 06 	call	0xd0a	; 0xd0a <__subsf3>
     9f0:	0e 94 40 08 	call	0x1080	; 0x1080 <__fixsfsi>
     9f4:	9b 01       	movw	r18, r22
     9f6:	ac 01       	movw	r20, r24
     9f8:	20 50       	subi	r18, 0x00	; 0
     9fa:	30 40       	sbci	r19, 0x00	; 0
     9fc:	40 40       	sbci	r20, 0x00	; 0
     9fe:	50 48       	sbci	r21, 0x80	; 128
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <__fixunssfsi+0x4a>
     a02:	c8 01       	movw	r24, r16
     a04:	b7 01       	movw	r22, r14
     a06:	0e 94 40 08 	call	0x1080	; 0x1080 <__fixsfsi>
     a0a:	9b 01       	movw	r18, r22
     a0c:	ac 01       	movw	r20, r24
     a0e:	b9 01       	movw	r22, r18
     a10:	ca 01       	movw	r24, r20
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	08 95       	ret

00000a1c <_fpadd_parts>:
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	e4 e1       	ldi	r30, 0x14	; 20
     a22:	f5 e0       	ldi	r31, 0x05	; 5
     a24:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__prologue_saves__+0x8>
     a28:	fc 01       	movw	r30, r24
     a2a:	ea 01       	movw	r28, r20
     a2c:	80 81       	ld	r24, Z
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	08 f4       	brcc	.+2      	; 0xa34 <_fpadd_parts+0x18>
     a32:	38 c1       	rjmp	.+624    	; 0xca4 <_fpadd_parts+0x288>
     a34:	db 01       	movw	r26, r22
     a36:	9c 91       	ld	r25, X
     a38:	92 30       	cpi	r25, 0x02	; 2
     a3a:	08 f4       	brcc	.+2      	; 0xa3e <_fpadd_parts+0x22>
     a3c:	30 c1       	rjmp	.+608    	; 0xc9e <_fpadd_parts+0x282>
     a3e:	84 30       	cpi	r24, 0x04	; 4
     a40:	59 f4       	brne	.+22     	; 0xa58 <_fpadd_parts+0x3c>
     a42:	94 30       	cpi	r25, 0x04	; 4
     a44:	09 f0       	breq	.+2      	; 0xa48 <_fpadd_parts+0x2c>
     a46:	2e c1       	rjmp	.+604    	; 0xca4 <_fpadd_parts+0x288>
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	11 96       	adiw	r26, 0x01	; 1
     a4c:	8c 91       	ld	r24, X
     a4e:	11 97       	sbiw	r26, 0x01	; 1
     a50:	98 17       	cp	r25, r24
     a52:	09 f0       	breq	.+2      	; 0xa56 <_fpadd_parts+0x3a>
     a54:	21 c1       	rjmp	.+578    	; 0xc98 <_fpadd_parts+0x27c>
     a56:	26 c1       	rjmp	.+588    	; 0xca4 <_fpadd_parts+0x288>
     a58:	94 30       	cpi	r25, 0x04	; 4
     a5a:	09 f4       	brne	.+2      	; 0xa5e <_fpadd_parts+0x42>
     a5c:	20 c1       	rjmp	.+576    	; 0xc9e <_fpadd_parts+0x282>
     a5e:	92 30       	cpi	r25, 0x02	; 2
     a60:	b1 f4       	brne	.+44     	; 0xa8e <_fpadd_parts+0x72>
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	09 f0       	breq	.+2      	; 0xa68 <_fpadd_parts+0x4c>
     a66:	1e c1       	rjmp	.+572    	; 0xca4 <_fpadd_parts+0x288>
     a68:	ca 01       	movw	r24, r20
     a6a:	af 01       	movw	r20, r30
     a6c:	28 e0       	ldi	r18, 0x08	; 8
     a6e:	da 01       	movw	r26, r20
     a70:	0d 90       	ld	r0, X+
     a72:	ad 01       	movw	r20, r26
     a74:	dc 01       	movw	r26, r24
     a76:	0d 92       	st	X+, r0
     a78:	cd 01       	movw	r24, r26
     a7a:	21 50       	subi	r18, 0x01	; 1
     a7c:	c1 f7       	brne	.-16     	; 0xa6e <_fpadd_parts+0x52>
     a7e:	db 01       	movw	r26, r22
     a80:	11 96       	adiw	r26, 0x01	; 1
     a82:	8c 91       	ld	r24, X
     a84:	11 97       	sbiw	r26, 0x01	; 1
     a86:	91 81       	ldd	r25, Z+1	; 0x01
     a88:	89 23       	and	r24, r25
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	0a c1       	rjmp	.+532    	; 0xca2 <_fpadd_parts+0x286>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	09 f4       	brne	.+2      	; 0xa94 <_fpadd_parts+0x78>
     a92:	05 c1       	rjmp	.+522    	; 0xc9e <_fpadd_parts+0x282>
     a94:	c2 80       	ldd	r12, Z+2	; 0x02
     a96:	d3 80       	ldd	r13, Z+3	; 0x03
     a98:	db 01       	movw	r26, r22
     a9a:	12 96       	adiw	r26, 0x02	; 2
     a9c:	6d 90       	ld	r6, X+
     a9e:	7c 90       	ld	r7, X
     aa0:	13 97       	sbiw	r26, 0x03	; 3
     aa2:	24 81       	ldd	r18, Z+4	; 0x04
     aa4:	35 81       	ldd	r19, Z+5	; 0x05
     aa6:	46 81       	ldd	r20, Z+6	; 0x06
     aa8:	57 81       	ldd	r21, Z+7	; 0x07
     aaa:	14 96       	adiw	r26, 0x04	; 4
     aac:	ed 90       	ld	r14, X+
     aae:	fd 90       	ld	r15, X+
     ab0:	0d 91       	ld	r16, X+
     ab2:	1c 91       	ld	r17, X
     ab4:	17 97       	sbiw	r26, 0x07	; 7
     ab6:	c6 01       	movw	r24, r12
     ab8:	86 19       	sub	r24, r6
     aba:	97 09       	sbc	r25, r7
     abc:	5c 01       	movw	r10, r24
     abe:	97 ff       	sbrs	r25, 7
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <_fpadd_parts+0xae>
     ac2:	aa 24       	eor	r10, r10
     ac4:	bb 24       	eor	r11, r11
     ac6:	a8 1a       	sub	r10, r24
     ac8:	b9 0a       	sbc	r11, r25
     aca:	b0 e2       	ldi	r27, 0x20	; 32
     acc:	ab 16       	cp	r10, r27
     ace:	b1 04       	cpc	r11, r1
     ad0:	0c f0       	brlt	.+2      	; 0xad4 <_fpadd_parts+0xb8>
     ad2:	61 c0       	rjmp	.+194    	; 0xb96 <_fpadd_parts+0x17a>
     ad4:	18 16       	cp	r1, r24
     ad6:	19 06       	cpc	r1, r25
     ad8:	6c f5       	brge	.+90     	; 0xb34 <_fpadd_parts+0x118>
     ada:	37 01       	movw	r6, r14
     adc:	48 01       	movw	r8, r16
     ade:	0a 2c       	mov	r0, r10
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <_fpadd_parts+0xce>
     ae2:	96 94       	lsr	r9
     ae4:	87 94       	ror	r8
     ae6:	77 94       	ror	r7
     ae8:	67 94       	ror	r6
     aea:	0a 94       	dec	r0
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <_fpadd_parts+0xc6>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	0a 2c       	mov	r0, r10
     af8:	04 c0       	rjmp	.+8      	; 0xb02 <_fpadd_parts+0xe6>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	aa 1f       	adc	r26, r26
     b00:	bb 1f       	adc	r27, r27
     b02:	0a 94       	dec	r0
     b04:	d2 f7       	brpl	.-12     	; 0xafa <_fpadd_parts+0xde>
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	a1 09       	sbc	r26, r1
     b0a:	b1 09       	sbc	r27, r1
     b0c:	8e 21       	and	r24, r14
     b0e:	9f 21       	and	r25, r15
     b10:	a0 23       	and	r26, r16
     b12:	b1 23       	and	r27, r17
     b14:	ee 24       	eor	r14, r14
     b16:	ff 24       	eor	r15, r15
     b18:	87 01       	movw	r16, r14
     b1a:	e3 94       	inc	r14
     b1c:	00 97       	sbiw	r24, 0x00	; 0
     b1e:	a1 05       	cpc	r26, r1
     b20:	b1 05       	cpc	r27, r1
     b22:	19 f4       	brne	.+6      	; 0xb2a <_fpadd_parts+0x10e>
     b24:	ee 24       	eor	r14, r14
     b26:	ff 24       	eor	r15, r15
     b28:	87 01       	movw	r16, r14
     b2a:	e6 28       	or	r14, r6
     b2c:	f7 28       	or	r15, r7
     b2e:	08 29       	or	r16, r8
     b30:	19 29       	or	r17, r9
     b32:	3c c0       	rjmp	.+120    	; 0xbac <_fpadd_parts+0x190>
     b34:	00 97       	sbiw	r24, 0x00	; 0
     b36:	d1 f1       	breq	.+116    	; 0xbac <_fpadd_parts+0x190>
     b38:	ca 0c       	add	r12, r10
     b3a:	db 1c       	adc	r13, r11
     b3c:	39 01       	movw	r6, r18
     b3e:	4a 01       	movw	r8, r20
     b40:	0a 2c       	mov	r0, r10
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <_fpadd_parts+0x130>
     b44:	96 94       	lsr	r9
     b46:	87 94       	ror	r8
     b48:	77 94       	ror	r7
     b4a:	67 94       	ror	r6
     b4c:	0a 94       	dec	r0
     b4e:	d2 f7       	brpl	.-12     	; 0xb44 <_fpadd_parts+0x128>
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	a0 e0       	ldi	r26, 0x00	; 0
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	0a 2c       	mov	r0, r10
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <_fpadd_parts+0x148>
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	aa 1f       	adc	r26, r26
     b62:	bb 1f       	adc	r27, r27
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <_fpadd_parts+0x140>
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	a1 09       	sbc	r26, r1
     b6c:	b1 09       	sbc	r27, r1
     b6e:	82 23       	and	r24, r18
     b70:	93 23       	and	r25, r19
     b72:	a4 23       	and	r26, r20
     b74:	b5 23       	and	r27, r21
     b76:	21 e0       	ldi	r18, 0x01	; 1
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	a1 05       	cpc	r26, r1
     b82:	b1 05       	cpc	r27, r1
     b84:	19 f4       	brne	.+6      	; 0xb8c <_fpadd_parts+0x170>
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	a9 01       	movw	r20, r18
     b8c:	26 29       	or	r18, r6
     b8e:	37 29       	or	r19, r7
     b90:	48 29       	or	r20, r8
     b92:	59 29       	or	r21, r9
     b94:	0b c0       	rjmp	.+22     	; 0xbac <_fpadd_parts+0x190>
     b96:	6c 14       	cp	r6, r12
     b98:	7d 04       	cpc	r7, r13
     b9a:	24 f4       	brge	.+8      	; 0xba4 <_fpadd_parts+0x188>
     b9c:	ee 24       	eor	r14, r14
     b9e:	ff 24       	eor	r15, r15
     ba0:	87 01       	movw	r16, r14
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <_fpadd_parts+0x190>
     ba4:	63 01       	movw	r12, r6
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	a9 01       	movw	r20, r18
     bac:	81 81       	ldd	r24, Z+1	; 0x01
     bae:	fb 01       	movw	r30, r22
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	89 17       	cp	r24, r25
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <_fpadd_parts+0x19c>
     bb6:	45 c0       	rjmp	.+138    	; 0xc42 <_fpadd_parts+0x226>
     bb8:	88 23       	and	r24, r24
     bba:	49 f0       	breq	.+18     	; 0xbce <_fpadd_parts+0x1b2>
     bbc:	d8 01       	movw	r26, r16
     bbe:	c7 01       	movw	r24, r14
     bc0:	82 1b       	sub	r24, r18
     bc2:	93 0b       	sbc	r25, r19
     bc4:	a4 0b       	sbc	r26, r20
     bc6:	b5 0b       	sbc	r27, r21
     bc8:	9c 01       	movw	r18, r24
     bca:	ad 01       	movw	r20, r26
     bcc:	04 c0       	rjmp	.+8      	; 0xbd6 <_fpadd_parts+0x1ba>
     bce:	2e 19       	sub	r18, r14
     bd0:	3f 09       	sbc	r19, r15
     bd2:	40 0b       	sbc	r20, r16
     bd4:	51 0b       	sbc	r21, r17
     bd6:	57 fd       	sbrc	r21, 7
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <_fpadd_parts+0x1c6>
     bda:	19 82       	std	Y+1, r1	; 0x01
     bdc:	db 82       	std	Y+3, r13	; 0x03
     bde:	ca 82       	std	Y+2, r12	; 0x02
     be0:	0b c0       	rjmp	.+22     	; 0xbf8 <_fpadd_parts+0x1dc>
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	89 83       	std	Y+1, r24	; 0x01
     be6:	db 82       	std	Y+3, r13	; 0x03
     be8:	ca 82       	std	Y+2, r12	; 0x02
     bea:	50 95       	com	r21
     bec:	40 95       	com	r20
     bee:	30 95       	com	r19
     bf0:	21 95       	neg	r18
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	2c 83       	std	Y+4, r18	; 0x04
     bfa:	3d 83       	std	Y+5, r19	; 0x05
     bfc:	4e 83       	std	Y+6, r20	; 0x06
     bfe:	5f 83       	std	Y+7, r21	; 0x07
     c00:	0d c0       	rjmp	.+26     	; 0xc1c <_fpadd_parts+0x200>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	aa 1f       	adc	r26, r26
     c08:	bb 1f       	adc	r27, r27
     c0a:	8c 83       	std	Y+4, r24	; 0x04
     c0c:	9d 83       	std	Y+5, r25	; 0x05
     c0e:	ae 83       	std	Y+6, r26	; 0x06
     c10:	bf 83       	std	Y+7, r27	; 0x07
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	9b 81       	ldd	r25, Y+3	; 0x03
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9b 83       	std	Y+3, r25	; 0x03
     c1a:	8a 83       	std	Y+2, r24	; 0x02
     c1c:	8c 81       	ldd	r24, Y+4	; 0x04
     c1e:	9d 81       	ldd	r25, Y+5	; 0x05
     c20:	ae 81       	ldd	r26, Y+6	; 0x06
     c22:	bf 81       	ldd	r27, Y+7	; 0x07
     c24:	9c 01       	movw	r18, r24
     c26:	ad 01       	movw	r20, r26
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	30 40       	sbci	r19, 0x00	; 0
     c2c:	40 40       	sbci	r20, 0x00	; 0
     c2e:	50 40       	sbci	r21, 0x00	; 0
     c30:	2f 3f       	cpi	r18, 0xFF	; 255
     c32:	ef ef       	ldi	r30, 0xFF	; 255
     c34:	3e 07       	cpc	r19, r30
     c36:	ef ef       	ldi	r30, 0xFF	; 255
     c38:	4e 07       	cpc	r20, r30
     c3a:	ef e3       	ldi	r30, 0x3F	; 63
     c3c:	5e 07       	cpc	r21, r30
     c3e:	08 f3       	brcs	.-62     	; 0xc02 <_fpadd_parts+0x1e6>
     c40:	0b c0       	rjmp	.+22     	; 0xc58 <_fpadd_parts+0x23c>
     c42:	89 83       	std	Y+1, r24	; 0x01
     c44:	db 82       	std	Y+3, r13	; 0x03
     c46:	ca 82       	std	Y+2, r12	; 0x02
     c48:	2e 0d       	add	r18, r14
     c4a:	3f 1d       	adc	r19, r15
     c4c:	40 1f       	adc	r20, r16
     c4e:	51 1f       	adc	r21, r17
     c50:	2c 83       	std	Y+4, r18	; 0x04
     c52:	3d 83       	std	Y+5, r19	; 0x05
     c54:	4e 83       	std	Y+6, r20	; 0x06
     c56:	5f 83       	std	Y+7, r21	; 0x07
     c58:	83 e0       	ldi	r24, 0x03	; 3
     c5a:	88 83       	st	Y, r24
     c5c:	2c 81       	ldd	r18, Y+4	; 0x04
     c5e:	3d 81       	ldd	r19, Y+5	; 0x05
     c60:	4e 81       	ldd	r20, Y+6	; 0x06
     c62:	5f 81       	ldd	r21, Y+7	; 0x07
     c64:	57 ff       	sbrs	r21, 7
     c66:	1d c0       	rjmp	.+58     	; 0xca2 <_fpadd_parts+0x286>
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	81 70       	andi	r24, 0x01	; 1
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	56 95       	lsr	r21
     c76:	47 95       	ror	r20
     c78:	37 95       	ror	r19
     c7a:	27 95       	ror	r18
     c7c:	82 2b       	or	r24, r18
     c7e:	93 2b       	or	r25, r19
     c80:	a4 2b       	or	r26, r20
     c82:	b5 2b       	or	r27, r21
     c84:	8c 83       	std	Y+4, r24	; 0x04
     c86:	9d 83       	std	Y+5, r25	; 0x05
     c88:	ae 83       	std	Y+6, r26	; 0x06
     c8a:	bf 83       	std	Y+7, r27	; 0x07
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	9b 81       	ldd	r25, Y+3	; 0x03
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	9b 83       	std	Y+3, r25	; 0x03
     c94:	8a 83       	std	Y+2, r24	; 0x02
     c96:	05 c0       	rjmp	.+10     	; 0xca2 <_fpadd_parts+0x286>
     c98:	e2 e7       	ldi	r30, 0x72	; 114
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <_fpadd_parts+0x288>
     c9e:	fb 01       	movw	r30, r22
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <_fpadd_parts+0x288>
     ca2:	fe 01       	movw	r30, r28
     ca4:	cf 01       	movw	r24, r30
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	ee e0       	ldi	r30, 0x0E	; 14
     cac:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__epilogue_restores__+0x8>

00000cb0 <__addsf3>:
     cb0:	a0 e2       	ldi	r26, 0x20	; 32
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	ee e5       	ldi	r30, 0x5E	; 94
     cb6:	f6 e0       	ldi	r31, 0x06	; 6
     cb8:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__prologue_saves__+0x18>
     cbc:	69 83       	std	Y+1, r22	; 0x01
     cbe:	7a 83       	std	Y+2, r23	; 0x02
     cc0:	8b 83       	std	Y+3, r24	; 0x03
     cc2:	9c 83       	std	Y+4, r25	; 0x04
     cc4:	2d 83       	std	Y+5, r18	; 0x05
     cc6:	3e 83       	std	Y+6, r19	; 0x06
     cc8:	4f 83       	std	Y+7, r20	; 0x07
     cca:	58 87       	std	Y+8, r21	; 0x08
     ccc:	89 e0       	ldi	r24, 0x09	; 9
     cce:	e8 2e       	mov	r14, r24
     cd0:	f1 2c       	mov	r15, r1
     cd2:	ec 0e       	add	r14, r28
     cd4:	fd 1e       	adc	r15, r29
     cd6:	ce 01       	movw	r24, r28
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	b7 01       	movw	r22, r14
     cdc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
     ce0:	8e 01       	movw	r16, r28
     ce2:	0f 5e       	subi	r16, 0xEF	; 239
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	ce 01       	movw	r24, r28
     ce8:	05 96       	adiw	r24, 0x05	; 5
     cea:	b8 01       	movw	r22, r16
     cec:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
     cf0:	c7 01       	movw	r24, r14
     cf2:	b8 01       	movw	r22, r16
     cf4:	ae 01       	movw	r20, r28
     cf6:	47 5e       	subi	r20, 0xE7	; 231
     cf8:	5f 4f       	sbci	r21, 0xFF	; 255
     cfa:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_fpadd_parts>
     cfe:	0e 94 92 08 	call	0x1124	; 0x1124 <__pack_f>
     d02:	a0 96       	adiw	r28, 0x20	; 32
     d04:	e6 e0       	ldi	r30, 0x06	; 6
     d06:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__epilogue_restores__+0x18>

00000d0a <__subsf3>:
     d0a:	a0 e2       	ldi	r26, 0x20	; 32
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	eb e8       	ldi	r30, 0x8B	; 139
     d10:	f6 e0       	ldi	r31, 0x06	; 6
     d12:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__prologue_saves__+0x18>
     d16:	69 83       	std	Y+1, r22	; 0x01
     d18:	7a 83       	std	Y+2, r23	; 0x02
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	2d 83       	std	Y+5, r18	; 0x05
     d20:	3e 83       	std	Y+6, r19	; 0x06
     d22:	4f 83       	std	Y+7, r20	; 0x07
     d24:	58 87       	std	Y+8, r21	; 0x08
     d26:	8e 01       	movw	r16, r28
     d28:	07 5f       	subi	r16, 0xF7	; 247
     d2a:	1f 4f       	sbci	r17, 0xFF	; 255
     d2c:	ce 01       	movw	r24, r28
     d2e:	01 96       	adiw	r24, 0x01	; 1
     d30:	b8 01       	movw	r22, r16
     d32:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
     d36:	91 e1       	ldi	r25, 0x11	; 17
     d38:	e9 2e       	mov	r14, r25
     d3a:	f1 2c       	mov	r15, r1
     d3c:	ec 0e       	add	r14, r28
     d3e:	fd 1e       	adc	r15, r29
     d40:	ce 01       	movw	r24, r28
     d42:	05 96       	adiw	r24, 0x05	; 5
     d44:	b7 01       	movw	r22, r14
     d46:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
     d4a:	8a 89       	ldd	r24, Y+18	; 0x12
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	89 27       	eor	r24, r25
     d50:	8a 8b       	std	Y+18, r24	; 0x12
     d52:	c8 01       	movw	r24, r16
     d54:	b7 01       	movw	r22, r14
     d56:	ae 01       	movw	r20, r28
     d58:	47 5e       	subi	r20, 0xE7	; 231
     d5a:	5f 4f       	sbci	r21, 0xFF	; 255
     d5c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_fpadd_parts>
     d60:	0e 94 92 08 	call	0x1124	; 0x1124 <__pack_f>
     d64:	a0 96       	adiw	r28, 0x20	; 32
     d66:	e6 e0       	ldi	r30, 0x06	; 6
     d68:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__epilogue_restores__+0x18>

00000d6c <__mulsf3>:
     d6c:	a0 e2       	ldi	r26, 0x20	; 32
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ec eb       	ldi	r30, 0xBC	; 188
     d72:	f6 e0       	ldi	r31, 0x06	; 6
     d74:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__prologue_saves__>
     d78:	69 83       	std	Y+1, r22	; 0x01
     d7a:	7a 83       	std	Y+2, r23	; 0x02
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	9c 83       	std	Y+4, r25	; 0x04
     d80:	2d 83       	std	Y+5, r18	; 0x05
     d82:	3e 83       	std	Y+6, r19	; 0x06
     d84:	4f 83       	std	Y+7, r20	; 0x07
     d86:	58 87       	std	Y+8, r21	; 0x08
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	be 01       	movw	r22, r28
     d8e:	67 5f       	subi	r22, 0xF7	; 247
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
     d96:	ce 01       	movw	r24, r28
     d98:	05 96       	adiw	r24, 0x05	; 5
     d9a:	be 01       	movw	r22, r28
     d9c:	6f 5e       	subi	r22, 0xEF	; 239
     d9e:	7f 4f       	sbci	r23, 0xFF	; 255
     da0:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
     da4:	99 85       	ldd	r25, Y+9	; 0x09
     da6:	92 30       	cpi	r25, 0x02	; 2
     da8:	78 f0       	brcs	.+30     	; 0xdc8 <__mulsf3+0x5c>
     daa:	89 89       	ldd	r24, Y+17	; 0x11
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	c0 f0       	brcs	.+48     	; 0xde0 <__mulsf3+0x74>
     db0:	94 30       	cpi	r25, 0x04	; 4
     db2:	19 f4       	brne	.+6      	; 0xdba <__mulsf3+0x4e>
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	41 f4       	brne	.+16     	; 0xdc8 <__mulsf3+0x5c>
     db8:	cb c0       	rjmp	.+406    	; 0xf50 <__mulsf3+0x1e4>
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <__mulsf3+0x58>
     dbe:	92 30       	cpi	r25, 0x02	; 2
     dc0:	79 f4       	brne	.+30     	; 0xde0 <__mulsf3+0x74>
     dc2:	c6 c0       	rjmp	.+396    	; 0xf50 <__mulsf3+0x1e4>
     dc4:	92 30       	cpi	r25, 0x02	; 2
     dc6:	51 f4       	brne	.+20     	; 0xddc <__mulsf3+0x70>
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	2a 85       	ldd	r18, Y+10	; 0x0a
     dcc:	9a 89       	ldd	r25, Y+18	; 0x12
     dce:	29 17       	cp	r18, r25
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <__mulsf3+0x68>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	8a 87       	std	Y+10, r24	; 0x0a
     dd6:	ce 01       	movw	r24, r28
     dd8:	09 96       	adiw	r24, 0x09	; 9
     dda:	bc c0       	rjmp	.+376    	; 0xf54 <__mulsf3+0x1e8>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	51 f4       	brne	.+20     	; 0xdf4 <__mulsf3+0x88>
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	2a 85       	ldd	r18, Y+10	; 0x0a
     de4:	9a 89       	ldd	r25, Y+18	; 0x12
     de6:	29 17       	cp	r18, r25
     de8:	09 f4       	brne	.+2      	; 0xdec <__mulsf3+0x80>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	8a 8b       	std	Y+18, r24	; 0x12
     dee:	ce 01       	movw	r24, r28
     df0:	41 96       	adiw	r24, 0x11	; 17
     df2:	b0 c0       	rjmp	.+352    	; 0xf54 <__mulsf3+0x1e8>
     df4:	6d 84       	ldd	r6, Y+13	; 0x0d
     df6:	7e 84       	ldd	r7, Y+14	; 0x0e
     df8:	8f 84       	ldd	r8, Y+15	; 0x0f
     dfa:	98 88       	ldd	r9, Y+16	; 0x10
     dfc:	ed 88       	ldd	r14, Y+21	; 0x15
     dfe:	fe 88       	ldd	r15, Y+22	; 0x16
     e00:	0f 89       	ldd	r16, Y+23	; 0x17
     e02:	18 8d       	ldd	r17, Y+24	; 0x18
     e04:	e0 e2       	ldi	r30, 0x20	; 32
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	dc 01       	movw	r26, r24
     e0e:	aa 24       	eor	r10, r10
     e10:	bb 24       	eor	r11, r11
     e12:	65 01       	movw	r12, r10
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	a9 01       	movw	r20, r18
     e1a:	b3 01       	movw	r22, r6
     e1c:	61 70       	andi	r22, 0x01	; 1
     e1e:	70 70       	andi	r23, 0x00	; 0
     e20:	61 15       	cp	r22, r1
     e22:	71 05       	cpc	r23, r1
     e24:	d1 f0       	breq	.+52     	; 0xe5a <__mulsf3+0xee>
     e26:	2e 0d       	add	r18, r14
     e28:	3f 1d       	adc	r19, r15
     e2a:	40 1f       	adc	r20, r16
     e2c:	51 1f       	adc	r21, r17
     e2e:	15 01       	movw	r2, r10
     e30:	26 01       	movw	r4, r12
     e32:	28 0e       	add	r2, r24
     e34:	39 1e       	adc	r3, r25
     e36:	4a 1e       	adc	r4, r26
     e38:	5b 1e       	adc	r5, r27
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	a0 e0       	ldi	r26, 0x00	; 0
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	2e 15       	cp	r18, r14
     e44:	3f 05       	cpc	r19, r15
     e46:	40 07       	cpc	r20, r16
     e48:	51 07       	cpc	r21, r17
     e4a:	18 f0       	brcs	.+6      	; 0xe52 <__mulsf3+0xe6>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	dc 01       	movw	r26, r24
     e52:	82 0d       	add	r24, r2
     e54:	93 1d       	adc	r25, r3
     e56:	a4 1d       	adc	r26, r4
     e58:	b5 1d       	adc	r27, r5
     e5a:	aa 0c       	add	r10, r10
     e5c:	bb 1c       	adc	r11, r11
     e5e:	cc 1c       	adc	r12, r12
     e60:	dd 1c       	adc	r13, r13
     e62:	17 ff       	sbrs	r17, 7
     e64:	09 c0       	rjmp	.+18     	; 0xe78 <__mulsf3+0x10c>
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	26 2e       	mov	r2, r22
     e6a:	31 2c       	mov	r3, r1
     e6c:	41 2c       	mov	r4, r1
     e6e:	51 2c       	mov	r5, r1
     e70:	a2 28       	or	r10, r2
     e72:	b3 28       	or	r11, r3
     e74:	c4 28       	or	r12, r4
     e76:	d5 28       	or	r13, r5
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	49 f0       	breq	.+18     	; 0xe8e <__mulsf3+0x122>
     e7c:	ee 0c       	add	r14, r14
     e7e:	ff 1c       	adc	r15, r15
     e80:	00 1f       	adc	r16, r16
     e82:	11 1f       	adc	r17, r17
     e84:	96 94       	lsr	r9
     e86:	87 94       	ror	r8
     e88:	77 94       	ror	r7
     e8a:	67 94       	ror	r6
     e8c:	c6 cf       	rjmp	.-116    	; 0xe1a <__mulsf3+0xae>
     e8e:	6b 89       	ldd	r22, Y+19	; 0x13
     e90:	7c 89       	ldd	r23, Y+20	; 0x14
     e92:	eb 85       	ldd	r30, Y+11	; 0x0b
     e94:	fc 85       	ldd	r31, Y+12	; 0x0c
     e96:	6e 0f       	add	r22, r30
     e98:	7f 1f       	adc	r23, r31
     e9a:	6e 5f       	subi	r22, 0xFE	; 254
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	7c 8f       	std	Y+28, r23	; 0x1c
     ea0:	6b 8f       	std	Y+27, r22	; 0x1b
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	ea 85       	ldd	r30, Y+10	; 0x0a
     ea6:	7a 89       	ldd	r23, Y+18	; 0x12
     ea8:	e7 17       	cp	r30, r23
     eaa:	09 f4       	brne	.+2      	; 0xeae <__mulsf3+0x142>
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	6a 8f       	std	Y+26, r22	; 0x1a
     eb0:	6b 8d       	ldd	r22, Y+27	; 0x1b
     eb2:	7c 8d       	ldd	r23, Y+28	; 0x1c
     eb4:	10 c0       	rjmp	.+32     	; 0xed6 <__mulsf3+0x16a>
     eb6:	fc 01       	movw	r30, r24
     eb8:	e1 70       	andi	r30, 0x01	; 1
     eba:	f0 70       	andi	r31, 0x00	; 0
     ebc:	30 97       	sbiw	r30, 0x00	; 0
     ebe:	29 f0       	breq	.+10     	; 0xeca <__mulsf3+0x15e>
     ec0:	56 95       	lsr	r21
     ec2:	47 95       	ror	r20
     ec4:	37 95       	ror	r19
     ec6:	27 95       	ror	r18
     ec8:	50 68       	ori	r21, 0x80	; 128
     eca:	b6 95       	lsr	r27
     ecc:	a7 95       	ror	r26
     ece:	97 95       	ror	r25
     ed0:	87 95       	ror	r24
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	b7 fd       	sbrc	r27, 7
     ed8:	ee cf       	rjmp	.-36     	; 0xeb6 <__mulsf3+0x14a>
     eda:	0c c0       	rjmp	.+24     	; 0xef4 <__mulsf3+0x188>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	aa 1f       	adc	r26, r26
     ee2:	bb 1f       	adc	r27, r27
     ee4:	57 fd       	sbrc	r21, 7
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	22 0f       	add	r18, r18
     eea:	33 1f       	adc	r19, r19
     eec:	44 1f       	adc	r20, r20
     eee:	55 1f       	adc	r21, r21
     ef0:	61 50       	subi	r22, 0x01	; 1
     ef2:	70 40       	sbci	r23, 0x00	; 0
     ef4:	80 30       	cpi	r24, 0x00	; 0
     ef6:	e0 e0       	ldi	r30, 0x00	; 0
     ef8:	9e 07       	cpc	r25, r30
     efa:	e0 e0       	ldi	r30, 0x00	; 0
     efc:	ae 07       	cpc	r26, r30
     efe:	e0 e4       	ldi	r30, 0x40	; 64
     f00:	be 07       	cpc	r27, r30
     f02:	60 f3       	brcs	.-40     	; 0xedc <__mulsf3+0x170>
     f04:	6b 8f       	std	Y+27, r22	; 0x1b
     f06:	7c 8f       	std	Y+28, r23	; 0x1c
     f08:	6f e7       	ldi	r22, 0x7F	; 127
     f0a:	e6 2e       	mov	r14, r22
     f0c:	f1 2c       	mov	r15, r1
     f0e:	01 2d       	mov	r16, r1
     f10:	11 2d       	mov	r17, r1
     f12:	e8 22       	and	r14, r24
     f14:	f9 22       	and	r15, r25
     f16:	0a 23       	and	r16, r26
     f18:	1b 23       	and	r17, r27
     f1a:	60 e4       	ldi	r22, 0x40	; 64
     f1c:	e6 16       	cp	r14, r22
     f1e:	f1 04       	cpc	r15, r1
     f20:	01 05       	cpc	r16, r1
     f22:	11 05       	cpc	r17, r1
     f24:	61 f4       	brne	.+24     	; 0xf3e <__mulsf3+0x1d2>
     f26:	87 fd       	sbrc	r24, 7
     f28:	0a c0       	rjmp	.+20     	; 0xf3e <__mulsf3+0x1d2>
     f2a:	21 15       	cp	r18, r1
     f2c:	31 05       	cpc	r19, r1
     f2e:	41 05       	cpc	r20, r1
     f30:	51 05       	cpc	r21, r1
     f32:	29 f0       	breq	.+10     	; 0xf3e <__mulsf3+0x1d2>
     f34:	80 5c       	subi	r24, 0xC0	; 192
     f36:	9f 4f       	sbci	r25, 0xFF	; 255
     f38:	af 4f       	sbci	r26, 0xFF	; 255
     f3a:	bf 4f       	sbci	r27, 0xFF	; 255
     f3c:	80 78       	andi	r24, 0x80	; 128
     f3e:	8d 8f       	std	Y+29, r24	; 0x1d
     f40:	9e 8f       	std	Y+30, r25	; 0x1e
     f42:	af 8f       	std	Y+31, r26	; 0x1f
     f44:	b8 a3       	std	Y+32, r27	; 0x20
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	89 8f       	std	Y+25, r24	; 0x19
     f4a:	ce 01       	movw	r24, r28
     f4c:	49 96       	adiw	r24, 0x19	; 25
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <__mulsf3+0x1e8>
     f50:	82 e7       	ldi	r24, 0x72	; 114
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 92 08 	call	0x1124	; 0x1124 <__pack_f>
     f58:	a0 96       	adiw	r28, 0x20	; 32
     f5a:	e2 e1       	ldi	r30, 0x12	; 18
     f5c:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__epilogue_restores__>

00000f60 <__gtsf2>:
     f60:	a8 e1       	ldi	r26, 0x18	; 24
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e6 eb       	ldi	r30, 0xB6	; 182
     f66:	f7 e0       	ldi	r31, 0x07	; 7
     f68:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__prologue_saves__+0x18>
     f6c:	69 83       	std	Y+1, r22	; 0x01
     f6e:	7a 83       	std	Y+2, r23	; 0x02
     f70:	8b 83       	std	Y+3, r24	; 0x03
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	2d 83       	std	Y+5, r18	; 0x05
     f76:	3e 83       	std	Y+6, r19	; 0x06
     f78:	4f 83       	std	Y+7, r20	; 0x07
     f7a:	58 87       	std	Y+8, r21	; 0x08
     f7c:	8e 01       	movw	r16, r28
     f7e:	07 5f       	subi	r16, 0xF7	; 247
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	ce 01       	movw	r24, r28
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	b8 01       	movw	r22, r16
     f88:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
     f8c:	81 e1       	ldi	r24, 0x11	; 17
     f8e:	e8 2e       	mov	r14, r24
     f90:	f1 2c       	mov	r15, r1
     f92:	ec 0e       	add	r14, r28
     f94:	fd 1e       	adc	r15, r29
     f96:	ce 01       	movw	r24, r28
     f98:	05 96       	adiw	r24, 0x05	; 5
     f9a:	b7 01       	movw	r22, r14
     f9c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	40 f0       	brcs	.+16     	; 0xfb6 <__gtsf2+0x56>
     fa6:	89 89       	ldd	r24, Y+17	; 0x11
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	28 f0       	brcs	.+10     	; 0xfb6 <__gtsf2+0x56>
     fac:	c8 01       	movw	r24, r16
     fae:	b7 01       	movw	r22, r14
     fb0:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fpcmp_parts_f>
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <__gtsf2+0x58>
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	68 96       	adiw	r28, 0x18	; 24
     fba:	e6 e0       	ldi	r30, 0x06	; 6
     fbc:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__epilogue_restores__+0x18>

00000fc0 <__gesf2>:
     fc0:	a8 e1       	ldi	r26, 0x18	; 24
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e6 ee       	ldi	r30, 0xE6	; 230
     fc6:	f7 e0       	ldi	r31, 0x07	; 7
     fc8:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__prologue_saves__+0x18>
     fcc:	69 83       	std	Y+1, r22	; 0x01
     fce:	7a 83       	std	Y+2, r23	; 0x02
     fd0:	8b 83       	std	Y+3, r24	; 0x03
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	2d 83       	std	Y+5, r18	; 0x05
     fd6:	3e 83       	std	Y+6, r19	; 0x06
     fd8:	4f 83       	std	Y+7, r20	; 0x07
     fda:	58 87       	std	Y+8, r21	; 0x08
     fdc:	8e 01       	movw	r16, r28
     fde:	07 5f       	subi	r16, 0xF7	; 247
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	ce 01       	movw	r24, r28
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	b8 01       	movw	r22, r16
     fe8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
     fec:	81 e1       	ldi	r24, 0x11	; 17
     fee:	e8 2e       	mov	r14, r24
     ff0:	f1 2c       	mov	r15, r1
     ff2:	ec 0e       	add	r14, r28
     ff4:	fd 1e       	adc	r15, r29
     ff6:	ce 01       	movw	r24, r28
     ff8:	05 96       	adiw	r24, 0x05	; 5
     ffa:	b7 01       	movw	r22, r14
     ffc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
    1000:	89 85       	ldd	r24, Y+9	; 0x09
    1002:	82 30       	cpi	r24, 0x02	; 2
    1004:	40 f0       	brcs	.+16     	; 0x1016 <__gesf2+0x56>
    1006:	89 89       	ldd	r24, Y+17	; 0x11
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	28 f0       	brcs	.+10     	; 0x1016 <__gesf2+0x56>
    100c:	c8 01       	movw	r24, r16
    100e:	b7 01       	movw	r22, r14
    1010:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fpcmp_parts_f>
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <__gesf2+0x58>
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	68 96       	adiw	r28, 0x18	; 24
    101a:	e6 e0       	ldi	r30, 0x06	; 6
    101c:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__epilogue_restores__+0x18>

00001020 <__ltsf2>:
    1020:	a8 e1       	ldi	r26, 0x18	; 24
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e6 e1       	ldi	r30, 0x16	; 22
    1026:	f8 e0       	ldi	r31, 0x08	; 8
    1028:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <__prologue_saves__+0x18>
    102c:	69 83       	std	Y+1, r22	; 0x01
    102e:	7a 83       	std	Y+2, r23	; 0x02
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	2d 83       	std	Y+5, r18	; 0x05
    1036:	3e 83       	std	Y+6, r19	; 0x06
    1038:	4f 83       	std	Y+7, r20	; 0x07
    103a:	58 87       	std	Y+8, r21	; 0x08
    103c:	8e 01       	movw	r16, r28
    103e:	07 5f       	subi	r16, 0xF7	; 247
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	ce 01       	movw	r24, r28
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	b8 01       	movw	r22, r16
    1048:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
    104c:	81 e1       	ldi	r24, 0x11	; 17
    104e:	e8 2e       	mov	r14, r24
    1050:	f1 2c       	mov	r15, r1
    1052:	ec 0e       	add	r14, r28
    1054:	fd 1e       	adc	r15, r29
    1056:	ce 01       	movw	r24, r28
    1058:	05 96       	adiw	r24, 0x05	; 5
    105a:	b7 01       	movw	r22, r14
    105c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
    1060:	89 85       	ldd	r24, Y+9	; 0x09
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	40 f0       	brcs	.+16     	; 0x1076 <__ltsf2+0x56>
    1066:	89 89       	ldd	r24, Y+17	; 0x11
    1068:	82 30       	cpi	r24, 0x02	; 2
    106a:	28 f0       	brcs	.+10     	; 0x1076 <__ltsf2+0x56>
    106c:	c8 01       	movw	r24, r16
    106e:	b7 01       	movw	r22, r14
    1070:	0e 94 c9 09 	call	0x1392	; 0x1392 <__fpcmp_parts_f>
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <__ltsf2+0x58>
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	68 96       	adiw	r28, 0x18	; 24
    107a:	e6 e0       	ldi	r30, 0x06	; 6
    107c:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__epilogue_restores__+0x18>

00001080 <__fixsfsi>:
    1080:	ac e0       	ldi	r26, 0x0C	; 12
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e4       	ldi	r30, 0x46	; 70
    1086:	f8 e0       	ldi	r31, 0x08	; 8
    1088:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__prologue_saves__+0x20>
    108c:	69 83       	std	Y+1, r22	; 0x01
    108e:	7a 83       	std	Y+2, r23	; 0x02
    1090:	8b 83       	std	Y+3, r24	; 0x03
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	be 01       	movw	r22, r28
    109a:	6b 5f       	subi	r22, 0xFB	; 251
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__unpack_f>
    10a2:	8d 81       	ldd	r24, Y+5	; 0x05
    10a4:	82 30       	cpi	r24, 0x02	; 2
    10a6:	81 f1       	breq	.+96     	; 0x1108 <__fixsfsi+0x88>
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	70 f1       	brcs	.+92     	; 0x1108 <__fixsfsi+0x88>
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	21 f4       	brne	.+8      	; 0x10b8 <__fixsfsi+0x38>
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	88 23       	and	r24, r24
    10b4:	69 f1       	breq	.+90     	; 0x1110 <__fixsfsi+0x90>
    10b6:	0a c0       	rjmp	.+20     	; 0x10cc <__fixsfsi+0x4c>
    10b8:	2f 81       	ldd	r18, Y+7	; 0x07
    10ba:	38 85       	ldd	r19, Y+8	; 0x08
    10bc:	37 fd       	sbrc	r19, 7
    10be:	24 c0       	rjmp	.+72     	; 0x1108 <__fixsfsi+0x88>
    10c0:	6e 81       	ldd	r22, Y+6	; 0x06
    10c2:	2f 31       	cpi	r18, 0x1F	; 31
    10c4:	31 05       	cpc	r19, r1
    10c6:	3c f0       	brlt	.+14     	; 0x10d6 <__fixsfsi+0x56>
    10c8:	66 23       	and	r22, r22
    10ca:	11 f1       	breq	.+68     	; 0x1110 <__fixsfsi+0x90>
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	50 e8       	ldi	r21, 0x80	; 128
    10d4:	21 c0       	rjmp	.+66     	; 0x1118 <__fixsfsi+0x98>
    10d6:	8e e1       	ldi	r24, 0x1E	; 30
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	82 1b       	sub	r24, r18
    10dc:	93 0b       	sbc	r25, r19
    10de:	29 85       	ldd	r18, Y+9	; 0x09
    10e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    10e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    10e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    10e6:	04 c0       	rjmp	.+8      	; 0x10f0 <__fixsfsi+0x70>
    10e8:	56 95       	lsr	r21
    10ea:	47 95       	ror	r20
    10ec:	37 95       	ror	r19
    10ee:	27 95       	ror	r18
    10f0:	8a 95       	dec	r24
    10f2:	d2 f7       	brpl	.-12     	; 0x10e8 <__fixsfsi+0x68>
    10f4:	66 23       	and	r22, r22
    10f6:	81 f0       	breq	.+32     	; 0x1118 <__fixsfsi+0x98>
    10f8:	50 95       	com	r21
    10fa:	40 95       	com	r20
    10fc:	30 95       	com	r19
    10fe:	21 95       	neg	r18
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	4f 4f       	sbci	r20, 0xFF	; 255
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <__fixsfsi+0x98>
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <__fixsfsi+0x98>
    1110:	2f ef       	ldi	r18, 0xFF	; 255
    1112:	3f ef       	ldi	r19, 0xFF	; 255
    1114:	4f ef       	ldi	r20, 0xFF	; 255
    1116:	5f e7       	ldi	r21, 0x7F	; 127
    1118:	b9 01       	movw	r22, r18
    111a:	ca 01       	movw	r24, r20
    111c:	2c 96       	adiw	r28, 0x0c	; 12
    111e:	e2 e0       	ldi	r30, 0x02	; 2
    1120:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__epilogue_restores__+0x20>

00001124 <__pack_f>:
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	fc 01       	movw	r30, r24
    1132:	24 81       	ldd	r18, Z+4	; 0x04
    1134:	35 81       	ldd	r19, Z+5	; 0x05
    1136:	46 81       	ldd	r20, Z+6	; 0x06
    1138:	57 81       	ldd	r21, Z+7	; 0x07
    113a:	61 81       	ldd	r22, Z+1	; 0x01
    113c:	80 81       	ld	r24, Z
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	20 f4       	brcc	.+8      	; 0x114a <__pack_f+0x26>
    1142:	40 61       	ori	r20, 0x10	; 16
    1144:	ef ef       	ldi	r30, 0xFF	; 255
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	a3 c0       	rjmp	.+326    	; 0x1290 <__pack_f+0x16c>
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	09 f4       	brne	.+2      	; 0x1150 <__pack_f+0x2c>
    114e:	9b c0       	rjmp	.+310    	; 0x1286 <__pack_f+0x162>
    1150:	82 30       	cpi	r24, 0x02	; 2
    1152:	09 f4       	brne	.+2      	; 0x1156 <__pack_f+0x32>
    1154:	92 c0       	rjmp	.+292    	; 0x127a <__pack_f+0x156>
    1156:	21 15       	cp	r18, r1
    1158:	31 05       	cpc	r19, r1
    115a:	41 05       	cpc	r20, r1
    115c:	51 05       	cpc	r21, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <__pack_f+0x3e>
    1160:	8f c0       	rjmp	.+286    	; 0x1280 <__pack_f+0x15c>
    1162:	02 80       	ldd	r0, Z+2	; 0x02
    1164:	f3 81       	ldd	r31, Z+3	; 0x03
    1166:	e0 2d       	mov	r30, r0
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	e2 38       	cpi	r30, 0x82	; 130
    116c:	f8 07       	cpc	r31, r24
    116e:	0c f0       	brlt	.+2      	; 0x1172 <__pack_f+0x4e>
    1170:	5a c0       	rjmp	.+180    	; 0x1226 <__pack_f+0x102>
    1172:	c2 e8       	ldi	r28, 0x82	; 130
    1174:	df ef       	ldi	r29, 0xFF	; 255
    1176:	ce 1b       	sub	r28, r30
    1178:	df 0b       	sbc	r29, r31
    117a:	ca 31       	cpi	r28, 0x1A	; 26
    117c:	d1 05       	cpc	r29, r1
    117e:	6c f5       	brge	.+90     	; 0x11da <__pack_f+0xb6>
    1180:	79 01       	movw	r14, r18
    1182:	8a 01       	movw	r16, r20
    1184:	0c 2e       	mov	r0, r28
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <__pack_f+0x6c>
    1188:	16 95       	lsr	r17
    118a:	07 95       	ror	r16
    118c:	f7 94       	ror	r15
    118e:	e7 94       	ror	r14
    1190:	0a 94       	dec	r0
    1192:	d2 f7       	brpl	.-12     	; 0x1188 <__pack_f+0x64>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a0 e0       	ldi	r26, 0x00	; 0
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	0c 2e       	mov	r0, r28
    119e:	04 c0       	rjmp	.+8      	; 0x11a8 <__pack_f+0x84>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	aa 1f       	adc	r26, r26
    11a6:	bb 1f       	adc	r27, r27
    11a8:	0a 94       	dec	r0
    11aa:	d2 f7       	brpl	.-12     	; 0x11a0 <__pack_f+0x7c>
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	a1 09       	sbc	r26, r1
    11b0:	b1 09       	sbc	r27, r1
    11b2:	82 23       	and	r24, r18
    11b4:	93 23       	and	r25, r19
    11b6:	a4 23       	and	r26, r20
    11b8:	b5 23       	and	r27, r21
    11ba:	21 e0       	ldi	r18, 0x01	; 1
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	a1 05       	cpc	r26, r1
    11c6:	b1 05       	cpc	r27, r1
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <__pack_f+0xac>
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a9 01       	movw	r20, r18
    11d0:	2e 29       	or	r18, r14
    11d2:	3f 29       	or	r19, r15
    11d4:	40 2b       	or	r20, r16
    11d6:	51 2b       	or	r21, r17
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <__pack_f+0xbc>
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	a9 01       	movw	r20, r18
    11e0:	da 01       	movw	r26, r20
    11e2:	c9 01       	movw	r24, r18
    11e4:	8f 77       	andi	r24, 0x7F	; 127
    11e6:	90 70       	andi	r25, 0x00	; 0
    11e8:	a0 70       	andi	r26, 0x00	; 0
    11ea:	b0 70       	andi	r27, 0x00	; 0
    11ec:	80 34       	cpi	r24, 0x40	; 64
    11ee:	91 05       	cpc	r25, r1
    11f0:	a1 05       	cpc	r26, r1
    11f2:	b1 05       	cpc	r27, r1
    11f4:	39 f4       	brne	.+14     	; 0x1204 <__pack_f+0xe0>
    11f6:	27 ff       	sbrs	r18, 7
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <__pack_f+0xe8>
    11fa:	20 5c       	subi	r18, 0xC0	; 192
    11fc:	3f 4f       	sbci	r19, 0xFF	; 255
    11fe:	4f 4f       	sbci	r20, 0xFF	; 255
    1200:	5f 4f       	sbci	r21, 0xFF	; 255
    1202:	04 c0       	rjmp	.+8      	; 0x120c <__pack_f+0xe8>
    1204:	21 5c       	subi	r18, 0xC1	; 193
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	4f 4f       	sbci	r20, 0xFF	; 255
    120a:	5f 4f       	sbci	r21, 0xFF	; 255
    120c:	e1 e0       	ldi	r30, 0x01	; 1
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	20 30       	cpi	r18, 0x00	; 0
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	38 07       	cpc	r19, r24
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	48 07       	cpc	r20, r24
    121a:	80 e4       	ldi	r24, 0x40	; 64
    121c:	58 07       	cpc	r21, r24
    121e:	28 f5       	brcc	.+74     	; 0x126a <__pack_f+0x146>
    1220:	e0 e0       	ldi	r30, 0x00	; 0
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	22 c0       	rjmp	.+68     	; 0x126a <__pack_f+0x146>
    1226:	e0 38       	cpi	r30, 0x80	; 128
    1228:	f1 05       	cpc	r31, r1
    122a:	6c f5       	brge	.+90     	; 0x1286 <__pack_f+0x162>
    122c:	e1 58       	subi	r30, 0x81	; 129
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	da 01       	movw	r26, r20
    1232:	c9 01       	movw	r24, r18
    1234:	8f 77       	andi	r24, 0x7F	; 127
    1236:	90 70       	andi	r25, 0x00	; 0
    1238:	a0 70       	andi	r26, 0x00	; 0
    123a:	b0 70       	andi	r27, 0x00	; 0
    123c:	80 34       	cpi	r24, 0x40	; 64
    123e:	91 05       	cpc	r25, r1
    1240:	a1 05       	cpc	r26, r1
    1242:	b1 05       	cpc	r27, r1
    1244:	39 f4       	brne	.+14     	; 0x1254 <__pack_f+0x130>
    1246:	27 ff       	sbrs	r18, 7
    1248:	09 c0       	rjmp	.+18     	; 0x125c <__pack_f+0x138>
    124a:	20 5c       	subi	r18, 0xC0	; 192
    124c:	3f 4f       	sbci	r19, 0xFF	; 255
    124e:	4f 4f       	sbci	r20, 0xFF	; 255
    1250:	5f 4f       	sbci	r21, 0xFF	; 255
    1252:	04 c0       	rjmp	.+8      	; 0x125c <__pack_f+0x138>
    1254:	21 5c       	subi	r18, 0xC1	; 193
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	4f 4f       	sbci	r20, 0xFF	; 255
    125a:	5f 4f       	sbci	r21, 0xFF	; 255
    125c:	57 ff       	sbrs	r21, 7
    125e:	05 c0       	rjmp	.+10     	; 0x126a <__pack_f+0x146>
    1260:	56 95       	lsr	r21
    1262:	47 95       	ror	r20
    1264:	37 95       	ror	r19
    1266:	27 95       	ror	r18
    1268:	31 96       	adiw	r30, 0x01	; 1
    126a:	87 e0       	ldi	r24, 0x07	; 7
    126c:	56 95       	lsr	r21
    126e:	47 95       	ror	r20
    1270:	37 95       	ror	r19
    1272:	27 95       	ror	r18
    1274:	8a 95       	dec	r24
    1276:	d1 f7       	brne	.-12     	; 0x126c <__pack_f+0x148>
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <__pack_f+0x16c>
    127a:	e0 e0       	ldi	r30, 0x00	; 0
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	05 c0       	rjmp	.+10     	; 0x128a <__pack_f+0x166>
    1280:	e0 e0       	ldi	r30, 0x00	; 0
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <__pack_f+0x16c>
    1286:	ef ef       	ldi	r30, 0xFF	; 255
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	8e 2f       	mov	r24, r30
    1292:	87 95       	ror	r24
    1294:	88 27       	eor	r24, r24
    1296:	87 95       	ror	r24
    1298:	94 2f       	mov	r25, r20
    129a:	9f 77       	andi	r25, 0x7F	; 127
    129c:	67 95       	ror	r22
    129e:	66 27       	eor	r22, r22
    12a0:	67 95       	ror	r22
    12a2:	e6 95       	lsr	r30
    12a4:	e2 2e       	mov	r14, r18
    12a6:	a9 2f       	mov	r26, r25
    12a8:	a8 2b       	or	r26, r24
    12aa:	fe 2f       	mov	r31, r30
    12ac:	f6 2b       	or	r31, r22
    12ae:	62 2f       	mov	r22, r18
    12b0:	73 2f       	mov	r23, r19
    12b2:	8a 2f       	mov	r24, r26
    12b4:	9f 2f       	mov	r25, r31
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	e6 e0       	ldi	r30, 0x06	; 6
    12bc:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__epilogue_restores__+0x18>

000012c0 <__unpack_f>:
    12c0:	dc 01       	movw	r26, r24
    12c2:	fb 01       	movw	r30, r22
    12c4:	2c 91       	ld	r18, X
    12c6:	11 96       	adiw	r26, 0x01	; 1
    12c8:	3c 91       	ld	r19, X
    12ca:	11 97       	sbiw	r26, 0x01	; 1
    12cc:	12 96       	adiw	r26, 0x02	; 2
    12ce:	8c 91       	ld	r24, X
    12d0:	12 97       	sbiw	r26, 0x02	; 2
    12d2:	48 2f       	mov	r20, r24
    12d4:	4f 77       	andi	r20, 0x7F	; 127
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	98 2f       	mov	r25, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	99 27       	eor	r25, r25
    12de:	99 1f       	adc	r25, r25
    12e0:	13 96       	adiw	r26, 0x03	; 3
    12e2:	6c 91       	ld	r22, X
    12e4:	13 97       	sbiw	r26, 0x03	; 3
    12e6:	86 2f       	mov	r24, r22
    12e8:	88 0f       	add	r24, r24
    12ea:	89 2b       	or	r24, r25
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	66 1f       	adc	r22, r22
    12f0:	66 27       	eor	r22, r22
    12f2:	66 1f       	adc	r22, r22
    12f4:	61 83       	std	Z+1, r22	; 0x01
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	39 f5       	brne	.+78     	; 0x1348 <__unpack_f+0x88>
    12fa:	21 15       	cp	r18, r1
    12fc:	31 05       	cpc	r19, r1
    12fe:	41 05       	cpc	r20, r1
    1300:	51 05       	cpc	r21, r1
    1302:	11 f4       	brne	.+4      	; 0x1308 <__unpack_f+0x48>
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	29 c0       	rjmp	.+82     	; 0x135a <__unpack_f+0x9a>
    1308:	82 e8       	ldi	r24, 0x82	; 130
    130a:	9f ef       	ldi	r25, 0xFF	; 255
    130c:	93 83       	std	Z+3, r25	; 0x03
    130e:	82 83       	std	Z+2, r24	; 0x02
    1310:	67 e0       	ldi	r22, 0x07	; 7
    1312:	22 0f       	add	r18, r18
    1314:	33 1f       	adc	r19, r19
    1316:	44 1f       	adc	r20, r20
    1318:	55 1f       	adc	r21, r21
    131a:	6a 95       	dec	r22
    131c:	d1 f7       	brne	.-12     	; 0x1312 <__unpack_f+0x52>
    131e:	83 e0       	ldi	r24, 0x03	; 3
    1320:	80 83       	st	Z, r24
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <__unpack_f+0x76>
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	44 1f       	adc	r20, r20
    132a:	55 1f       	adc	r21, r21
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	93 83       	std	Z+3, r25	; 0x03
    1334:	82 83       	std	Z+2, r24	; 0x02
    1336:	20 30       	cpi	r18, 0x00	; 0
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	38 07       	cpc	r19, r24
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	48 07       	cpc	r20, r24
    1340:	80 e4       	ldi	r24, 0x40	; 64
    1342:	58 07       	cpc	r21, r24
    1344:	78 f3       	brcs	.-34     	; 0x1324 <__unpack_f+0x64>
    1346:	20 c0       	rjmp	.+64     	; 0x1388 <__unpack_f+0xc8>
    1348:	8f 3f       	cpi	r24, 0xFF	; 255
    134a:	91 05       	cpc	r25, r1
    134c:	79 f4       	brne	.+30     	; 0x136c <__unpack_f+0xac>
    134e:	21 15       	cp	r18, r1
    1350:	31 05       	cpc	r19, r1
    1352:	41 05       	cpc	r20, r1
    1354:	51 05       	cpc	r21, r1
    1356:	19 f4       	brne	.+6      	; 0x135e <__unpack_f+0x9e>
    1358:	84 e0       	ldi	r24, 0x04	; 4
    135a:	80 83       	st	Z, r24
    135c:	08 95       	ret
    135e:	44 ff       	sbrs	r20, 4
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <__unpack_f+0xa8>
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 83       	st	Z, r24
    1366:	10 c0       	rjmp	.+32     	; 0x1388 <__unpack_f+0xc8>
    1368:	10 82       	st	Z, r1
    136a:	0e c0       	rjmp	.+28     	; 0x1388 <__unpack_f+0xc8>
    136c:	8f 57       	subi	r24, 0x7F	; 127
    136e:	90 40       	sbci	r25, 0x00	; 0
    1370:	93 83       	std	Z+3, r25	; 0x03
    1372:	82 83       	std	Z+2, r24	; 0x02
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	80 83       	st	Z, r24
    1378:	87 e0       	ldi	r24, 0x07	; 7
    137a:	22 0f       	add	r18, r18
    137c:	33 1f       	adc	r19, r19
    137e:	44 1f       	adc	r20, r20
    1380:	55 1f       	adc	r21, r21
    1382:	8a 95       	dec	r24
    1384:	d1 f7       	brne	.-12     	; 0x137a <__unpack_f+0xba>
    1386:	50 64       	ori	r21, 0x40	; 64
    1388:	24 83       	std	Z+4, r18	; 0x04
    138a:	35 83       	std	Z+5, r19	; 0x05
    138c:	46 83       	std	Z+6, r20	; 0x06
    138e:	57 83       	std	Z+7, r21	; 0x07
    1390:	08 95       	ret

00001392 <__fpcmp_parts_f>:
    1392:	fc 01       	movw	r30, r24
    1394:	db 01       	movw	r26, r22
    1396:	90 81       	ld	r25, Z
    1398:	92 30       	cpi	r25, 0x02	; 2
    139a:	08 f4       	brcc	.+2      	; 0x139e <__fpcmp_parts_f+0xc>
    139c:	49 c0       	rjmp	.+146    	; 0x1430 <__fpcmp_parts_f+0x9e>
    139e:	8c 91       	ld	r24, X
    13a0:	82 30       	cpi	r24, 0x02	; 2
    13a2:	08 f4       	brcc	.+2      	; 0x13a6 <__fpcmp_parts_f+0x14>
    13a4:	45 c0       	rjmp	.+138    	; 0x1430 <__fpcmp_parts_f+0x9e>
    13a6:	94 30       	cpi	r25, 0x04	; 4
    13a8:	51 f4       	brne	.+20     	; 0x13be <__fpcmp_parts_f+0x2c>
    13aa:	61 81       	ldd	r22, Z+1	; 0x01
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	b1 f5       	brne	.+108    	; 0x141c <__fpcmp_parts_f+0x8a>
    13b0:	11 96       	adiw	r26, 0x01	; 1
    13b2:	2c 91       	ld	r18, X
    13b4:	11 97       	sbiw	r26, 0x01	; 1
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	26 1b       	sub	r18, r22
    13ba:	31 09       	sbc	r19, r1
    13bc:	41 c0       	rjmp	.+130    	; 0x1440 <__fpcmp_parts_f+0xae>
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	21 f0       	breq	.+8      	; 0x13ca <__fpcmp_parts_f+0x38>
    13c2:	92 30       	cpi	r25, 0x02	; 2
    13c4:	41 f4       	brne	.+16     	; 0x13d6 <__fpcmp_parts_f+0x44>
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	b1 f1       	breq	.+108    	; 0x1436 <__fpcmp_parts_f+0xa4>
    13ca:	11 96       	adiw	r26, 0x01	; 1
    13cc:	8c 91       	ld	r24, X
    13ce:	11 97       	sbiw	r26, 0x01	; 1
    13d0:	88 23       	and	r24, r24
    13d2:	a1 f1       	breq	.+104    	; 0x143c <__fpcmp_parts_f+0xaa>
    13d4:	2d c0       	rjmp	.+90     	; 0x1430 <__fpcmp_parts_f+0x9e>
    13d6:	61 81       	ldd	r22, Z+1	; 0x01
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	01 f1       	breq	.+64     	; 0x141c <__fpcmp_parts_f+0x8a>
    13dc:	11 96       	adiw	r26, 0x01	; 1
    13de:	8c 91       	ld	r24, X
    13e0:	11 97       	sbiw	r26, 0x01	; 1
    13e2:	68 17       	cp	r22, r24
    13e4:	d9 f4       	brne	.+54     	; 0x141c <__fpcmp_parts_f+0x8a>
    13e6:	22 81       	ldd	r18, Z+2	; 0x02
    13e8:	33 81       	ldd	r19, Z+3	; 0x03
    13ea:	12 96       	adiw	r26, 0x02	; 2
    13ec:	8d 91       	ld	r24, X+
    13ee:	9c 91       	ld	r25, X
    13f0:	13 97       	sbiw	r26, 0x03	; 3
    13f2:	82 17       	cp	r24, r18
    13f4:	93 07       	cpc	r25, r19
    13f6:	94 f0       	brlt	.+36     	; 0x141c <__fpcmp_parts_f+0x8a>
    13f8:	28 17       	cp	r18, r24
    13fa:	39 07       	cpc	r19, r25
    13fc:	bc f0       	brlt	.+46     	; 0x142c <__fpcmp_parts_f+0x9a>
    13fe:	24 81       	ldd	r18, Z+4	; 0x04
    1400:	35 81       	ldd	r19, Z+5	; 0x05
    1402:	46 81       	ldd	r20, Z+6	; 0x06
    1404:	57 81       	ldd	r21, Z+7	; 0x07
    1406:	14 96       	adiw	r26, 0x04	; 4
    1408:	8d 91       	ld	r24, X+
    140a:	9d 91       	ld	r25, X+
    140c:	0d 90       	ld	r0, X+
    140e:	bc 91       	ld	r27, X
    1410:	a0 2d       	mov	r26, r0
    1412:	82 17       	cp	r24, r18
    1414:	93 07       	cpc	r25, r19
    1416:	a4 07       	cpc	r26, r20
    1418:	b5 07       	cpc	r27, r21
    141a:	18 f4       	brcc	.+6      	; 0x1422 <__fpcmp_parts_f+0x90>
    141c:	66 23       	and	r22, r22
    141e:	41 f0       	breq	.+16     	; 0x1430 <__fpcmp_parts_f+0x9e>
    1420:	0d c0       	rjmp	.+26     	; 0x143c <__fpcmp_parts_f+0xaa>
    1422:	28 17       	cp	r18, r24
    1424:	39 07       	cpc	r19, r25
    1426:	4a 07       	cpc	r20, r26
    1428:	5b 07       	cpc	r21, r27
    142a:	28 f4       	brcc	.+10     	; 0x1436 <__fpcmp_parts_f+0xa4>
    142c:	66 23       	and	r22, r22
    142e:	31 f0       	breq	.+12     	; 0x143c <__fpcmp_parts_f+0xaa>
    1430:	21 e0       	ldi	r18, 0x01	; 1
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <__fpcmp_parts_f+0xae>
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <__fpcmp_parts_f+0xae>
    143c:	2f ef       	ldi	r18, 0xFF	; 255
    143e:	3f ef       	ldi	r19, 0xFF	; 255
    1440:	c9 01       	movw	r24, r18
    1442:	08 95       	ret

00001444 <__prologue_saves__>:
    1444:	2f 92       	push	r2
    1446:	3f 92       	push	r3
    1448:	4f 92       	push	r4
    144a:	5f 92       	push	r5
    144c:	6f 92       	push	r6
    144e:	7f 92       	push	r7
    1450:	8f 92       	push	r8
    1452:	9f 92       	push	r9
    1454:	af 92       	push	r10
    1456:	bf 92       	push	r11
    1458:	cf 92       	push	r12
    145a:	df 92       	push	r13
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	ca 1b       	sub	r28, r26
    146e:	db 0b       	sbc	r29, r27
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	09 94       	ijmp

0000147c <__epilogue_restores__>:
    147c:	2a 88       	ldd	r2, Y+18	; 0x12
    147e:	39 88       	ldd	r3, Y+17	; 0x11
    1480:	48 88       	ldd	r4, Y+16	; 0x10
    1482:	5f 84       	ldd	r5, Y+15	; 0x0f
    1484:	6e 84       	ldd	r6, Y+14	; 0x0e
    1486:	7d 84       	ldd	r7, Y+13	; 0x0d
    1488:	8c 84       	ldd	r8, Y+12	; 0x0c
    148a:	9b 84       	ldd	r9, Y+11	; 0x0b
    148c:	aa 84       	ldd	r10, Y+10	; 0x0a
    148e:	b9 84       	ldd	r11, Y+9	; 0x09
    1490:	c8 84       	ldd	r12, Y+8	; 0x08
    1492:	df 80       	ldd	r13, Y+7	; 0x07
    1494:	ee 80       	ldd	r14, Y+6	; 0x06
    1496:	fd 80       	ldd	r15, Y+5	; 0x05
    1498:	0c 81       	ldd	r16, Y+4	; 0x04
    149a:	1b 81       	ldd	r17, Y+3	; 0x03
    149c:	aa 81       	ldd	r26, Y+2	; 0x02
    149e:	b9 81       	ldd	r27, Y+1	; 0x01
    14a0:	ce 0f       	add	r28, r30
    14a2:	d1 1d       	adc	r29, r1
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	ed 01       	movw	r28, r26
    14b0:	08 95       	ret

000014b2 <_exit>:
    14b2:	f8 94       	cli

000014b4 <__stop_program>:
    14b4:	ff cf       	rjmp	.-2      	; 0x14b4 <__stop_program>
